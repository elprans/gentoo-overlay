diff -ruN pyggy-0.4.1.orig/pyggy/dfa.py pyggy-0.4.1/pyggy/dfa.py
--- pyggy-0.4.1.orig/pyggy/dfa.py	2004-06-28 22:27:12.000000000 -0400
+++ pyggy-0.4.1/pyggy/dfa.py	2009-01-18 20:15:14.000000000 -0500
@@ -6,9 +6,9 @@
 
 import string
 
-from util import printable
+from pyggy.util import printable
 from nfa import *
-import dot
+from pyggy import dot
 
 class dfa :
 	def __init__(self, machlist, relist) :
diff -ruN pyggy-0.4.1.orig/pyggy/dot.py pyggy-0.4.1/pyggy/dot.py
--- pyggy-0.4.1.orig/pyggy/dot.py	2003-08-11 21:15:10.000000000 -0400
+++ pyggy-0.4.1/pyggy/dot.py	2009-01-16 11:22:57.000000000 -0500
@@ -19,7 +19,7 @@
 
 	def __start(self, name) :
 		self.fname = name + str(os.getpid()) + ".dot"
-		self.f = file(self.fname, "w")
+		self.f = open(self.fname, "w")
 		self.f.write("digraph %s {\n" % name)
 
 	def add(self, str) :
diff -ruN pyggy-0.4.1.orig/pyggy/glr.py pyggy-0.4.1/pyggy/glr.py
--- pyggy-0.4.1.orig/pyggy/glr.py	2004-07-01 20:49:26.000000000 -0400
+++ pyggy-0.4.1/pyggy/glr.py	2009-01-18 20:14:56.000000000 -0500
@@ -9,9 +9,9 @@
 and is based on Tomita parsing.
 """
 
-import dot
-from util import printable
-from errors import *
+from pyggy import dot
+from pyggy.util import printable
+from pyggy.errors import *
 
 class prevlink :
 	"a link to a previous stacknode.  Each link has an associated symnode tree"
diff -ruN pyggy-0.4.1.orig/pyggy/helpers.py pyggy-0.4.1/pyggy/helpers.py
--- pyggy-0.4.1.orig/pyggy/helpers.py	2004-06-30 19:35:54.000000000 -0400
+++ pyggy-0.4.1/pyggy/helpers.py	2009-01-19 14:40:04.000000000 -0500
@@ -4,8 +4,10 @@
 The provide easy access to parser and lexer construction.
 """
 
-import glr
-from errors import *
+from pyggy import glr
+from pyggy.errors import *
+import os
+import imp
 
 def _mtime(fname) :
 	import os
@@ -13,9 +15,15 @@
 
 def _import(name) :
 	if name[-3:] == ".py" :
-		name = name[:-3]
-	exec "import " + name
-	return eval(name)
+		modulename = name[:-3]
+	else:
+		modulename = name
+	(path, modulefile) = os.path.split(name)
+	(modulename, moduleext) = os.path.splitext(modulefile)
+	(file, pathname, description) = imp.find_module(modulename, [path])
+	if file is not None:
+	    return imp.load_module(modulename, file, pathname, description)
+	return None
 
 def generate(fname, targ, debug=0, forcegen=0) :
 	"""
@@ -25,11 +33,11 @@
 	if forcegen or not os.path.exists(targ) or _mtime(targ) < _mtime(fname) :
 		print "generating %s from %s" % (targ, fname)
 		if fname[-4:] == ".pyl" :
-			import pylly
+			from pyggy import pylly
 			pylly.parsespec(fname, targ, debug=debug)
 		elif fname[-4:] == ".pyg" :
-			import pyggy
-			pyggy.parsespec(fname, targ, debug=debug)
+			from pyggy import pyggyc
+			pyggyc.parsespec(fname, targ, debug=debug)
 		else :
 			raise ApiError("bad spec filename %s" % fname)
 
@@ -38,7 +46,7 @@
 	Generate a lexer table, construct a lexer for lexing fname and return it.
 	Both the lexer and the generated module are returned.
 	"""
-	import lexer
+	from pyggy import lexer
 
 	if specfname[-4:] != ".pyl" :
 		raise ApiError("bad spec filename %s" % specfname)
@@ -52,8 +60,8 @@
 	Generate a parser table, construct a parser and return it.
 	The parser and the generated module are returned.
 	"""
-	import srgram
-	import glr
+	from pyggy import srgram
+	from pyggy import glr
 
 	if specfname[-4:] != ".pyg" :
 		raise ApiError("bad spec filename %s" % specfname)
diff -ruN pyggy-0.4.1.orig/pyggy/__init__.py pyggy-0.4.1/pyggy/__init__.py
--- pyggy-0.4.1.orig/pyggy/__init__.py	2004-06-29 22:09:49.000000000 -0400
+++ pyggy-0.4.1/pyggy/__init__.py	2009-01-18 20:10:12.000000000 -0500
@@ -1,4 +1,4 @@
 
-from helpers import *
-from errors import *
+from pyggy.helpers import *
+from pyggy.errors import *
 
diff -ruN pyggy-0.4.1.orig/pyggy/lexer.py pyggy-0.4.1/pyggy/lexer.py
--- pyggy-0.4.1.orig/pyggy/lexer.py	2004-10-15 22:38:06.000000000 -0400
+++ pyggy-0.4.1/pyggy/lexer.py	2009-01-18 20:13:22.000000000 -0500
@@ -5,8 +5,8 @@
 #
 
 import string
-from util import printable
-from errors import *
+from pyggy.util import printable
+from pyggy.errors import *
 
 # XXX some constants that must agree with the grammar constants.
 # this kis kinda poor right now.  fixme
@@ -98,7 +98,7 @@
 			self.input = sys.stdin
 			self.bufsize = 1
 		else :
-			self.input = file(fname)
+			self.input = open(fname)
 			self.bufsize = 1024
 		self.readbuf()
 		
diff -ruN pyggy-0.4.1.orig/pyggy/nfa.py pyggy-0.4.1/pyggy/nfa.py
--- pyggy-0.4.1.orig/pyggy/nfa.py	2003-08-28 18:00:04.000000000 -0400
+++ pyggy-0.4.1/pyggy/nfa.py	2009-01-18 20:14:37.000000000 -0500
@@ -4,11 +4,11 @@
 #	Construction kit for building up NFAs for regular expressions.
 #
 
-import dot
+from pyggy import dot
 import string
 import array
 
-from util import printable,minof,maxof
+from pyggy.util import printable,minof,maxof
 
 # Constants
 EPSILON = 0
diff -ruN pyggy-0.4.1.orig/pyggy/pyggyc.py pyggy-0.4.1/pyggy/pyggyc.py
--- pyggy-0.4.1.orig/pyggy/pyggyc.py	1969-12-31 19:00:00.000000000 -0500
+++ pyggy-0.4.1/pyggy/pyggyc.py	2009-01-18 20:12:24.000000000 -0500
@@ -0,0 +1,243 @@
+#!/usr/bin/python
+"""
+pyggy.py
+	Front end for the grammar spec file parser.
+"""
+
+import sys
+import getopt
+
+from pyggy.errors import *
+from pyggy import helpers
+
+# for parsing
+from pyggy import lexer
+from pyggy import srgram
+from pyggy import glr
+
+# import our parsing table
+from pyggy import pyggy_lextab
+from pyggy import pyggy_gramtab
+gt = pyggy_gramtab
+
+# for generating a new parse table
+from pyggy import slrgram
+
+
+def addtagged(name, prodno) :
+	if not name in gt.tagged :
+		gt.tagged[name] = []
+	if not prodno in gt.tagged[name] :
+		gt.tagged[name].append(prodno)
+
+def addconflict_int(conflict, p1, r, p2) :
+	if (p1,p2) in conflict :
+		if conflict[p1,p2] != r :
+			raise SpecError("Changing relationship between %d and %d from %s to %s" % (p1, p2, r, conflict[p1,p2]))
+		return 0
+	else :
+		conflict[p1,p2] = r
+		return 1
+
+def addconflict(conflict, p1, r, p2) :
+	"""
+	Add relationship "p1 r p2" to the conflict table.
+	Perform transitive closure for "gt" and "pref" relations.
+	"""
+	if addconflict_int(conflict, p1, r, p2) and r in ["gt", "pref" ] :
+		for (p3,p4),r2 in conflict.items() :
+			# p3==p2:  (p1 > p2) and (p2 > p4) --> (p1 > p4)
+			if p3 == p2 and r2 == r :
+				addconflict_int(conflict, p1, r, p4)
+			# p4==p1:  (p3 > p1) and (p1 > p2) --> (p3 > p2)
+			if p1 == p4 and r2 == r :
+				addconflict_int(conflict, p3, r, p2)
+
+def setprodprec(prodprec, prodno, prec, assoc) :
+	"set the precedence/assoc of a production, complain if already set."
+	v = [prec,assoc]
+	if prodprec[prodno] != None :
+		if prodprec[prodno] != v :
+			raise SpecError("Changing priority of [%s -> %s] from %s to %s" % \
+				(gt.gram[prodno][0], gt.gram[prodno][1], prodprec[prodno], v))
+	else :
+		prodprec[prodno] = v
+
+def printprec(tabs, conflict) :
+	print "Conflict relations: "
+	for (p1,p2),r in conflict.items() :
+		print "  %s %s %s" % (tabs.lr0.prodstr(p1), r, tabs.lr0.prodstr(p2))
+	print
+
+def addconflict_self(conflict, l, rel) :
+	"add (prod rel prod) to conflicts for each member of list"
+	for tag in l :
+		if tag in gt.tagged :
+			for prodno in gt.tagged[tag] :
+				for prodno2 in gt.tagged[tag] :
+					addconflict(conflict, prodno, rel, prodno2)
+					addconflict(conflict, prodno2, rel, prodno)
+
+def addconflict_decreasing(conflict, l, rel) :
+	"Add decreasing priority items to the conflict list"
+	# each member is less than the last
+	last = []
+	for tag in l :
+		if tag in gt.tagged :
+			for prodno in gt.tagged[tag] :
+				for lastprod in last :
+					addconflict(conflict, lastprod, rel, prodno)
+			if gt.tagged[tag] != [] :
+				last = gt.tagged[tag]
+
+def postproc(conflict, debug) :
+	"take the data structures we built up and generate parsing tables"
+	# find nonterminals and symbols
+	allsyms = []
+	for lhs,rhs in gt.gram :
+		for el in rhs :
+			if not el in allsyms :
+				allsyms.append(el)
+	
+	# tag all productions that contain a tag in their rhs.
+	unused = []
+	unrefed = []
+	allused = []
+	for tag in gt.leftlist + gt.rightlist + gt.nonassoclist + gt.preclist + gt.preflist :
+		if not tag in allused :
+			allused.append(tag)
+		for prodno in range(len(gt.gram)) :
+			if tag in gt.gram[prodno][1] :
+				addtagged(tag, prodno)
+		if not tag in gt.tagged and not tag in unused :
+			unused.append(tag)
+	for tag1,r,tag2 in gt.rellist :
+		if not tag1 in allused :
+			allused.append(tag1)
+		if not tag2 in allused :
+			allused.append(tag2)
+	for tag in gt.tagged.keys() :
+		if not tag in allused and not tag in unrefed:
+			unrefed.append(tag)
+	if unused != [] :
+		print "Warning: unused precedence tags:", " ".join(unused)
+	if unrefed != [] :
+		print "Warning: unreferenced tags:", " ".join(unrefed)
+
+	# fill up the conflict table with relations from tagged lists
+	addconflict_self(conflict, gt.leftlist, "left")
+	addconflict_self(conflict, gt.rightlist, "right")
+	addconflict_self(conflict, gt.nonassoclist, "nonassoc")
+	addconflict_decreasing(conflict, gt.preclist, "gt")
+	addconflict_decreasing(conflict, gt.preflist, "pref")
+
+	# add all explicitely stated relations
+	for tag1,r,tag2 in gt.rellist :
+		for prod1 in gt.tagged[tag1] :
+			for prod2 in gt.tagged[tag2] :
+				addconflict(conflict, prod1, r, prod2)
+
+def gen(fname, tabs) :
+	f = open(fname, "w")
+	f.write('\n# This file was generated automatically\n')
+
+	# emit all the actions
+	for idx in range(len(gt.funcs)) :
+		prods = ""
+		for idx2 in range(len(gt.gram)) :
+			if gt.actions[idx2] == idx :
+				if prods != "" :
+					prods += ", "
+				prods += tabs.lr0.prodstr(idx2)
+		f.write("\n# action %d for: %s\n" % (idx, prods))
+		f.write("def action%d(kids) :\n" % idx)
+		for line in gt.funcs[idx].split('\n') :
+			f.write("\t%s\n" % line)
+
+	tabs.write(f)
+	f.write("semactions = [%s]\n" % ", ".join(map(lambda n : "action%d" % n, gt.actions)))
+
+	f.write("gramspec = (goto, action, semactions)\n")
+
+	# write out the global code
+	f.write("\n")
+	f.write(gt.globcode)
+	f.write("\n")
+	f.close()
+
+def parsespec(fname, outfname, debug = 0) :
+	"""
+	Parse the spec file, generate parsing tables and write it out.
+
+	Debug levels less than 10 are for showing data about the parsed spec file
+	levels 10 and higher are for showing internal data.
+	"""
+	l = lexer.lexer(pyggy_lextab.lexspec)
+	l.setinput(fname)
+	g = srgram.SRGram(gt.gramspec)
+	p = glr.GLR(g)
+	p.setlexer(l)
+
+	try :
+		tree = p.parse()
+		# print the parse tree of the spec file
+		if debug >= 11 :
+			printcover = (debug >= 12)
+			glr.dottree(tree, printcover)
+		helpers.proctree(tree, gt)
+	except ParseError,e :
+		raise SpecError("%s:%d: parse error at %r" % (fname, pyggy_lextab.lineno, e.str))
+	except Error,e :
+		raise InternalError("unexpected exception %r" % e)
+
+
+	# process the parsed data
+	conflict = dict()
+	followsrestrict = [[] for idx in range(len(gt.gram))]
+	postproc(conflict, debug)
+
+	# generate tables
+	if debug >= 2 :
+		slrgram.debug = 1
+	tabs = slrgram.slrgram(gt.start, gt.gram, conflict, followsrestrict)
+
+	# print out information about the grammar, more if debug is set.
+	if debug >= 2 :
+		printprec(tabs, conflict)
+	printfull = (debug >= 1)
+	tabs.printtab(printfull)
+	if debug >= 3 : # show the lr0 state machine
+		tabs.lr0.dot()
+
+	gen(outfname, tabs)
+
+
+
+
+def usage(progname) :
+	print "usage:  %s [-d debuglevel] infile.pyg outfile.py"
+	sys.exit(1)
+
+def main() :
+	try :
+		opts,args = getopt.getopt(sys.argv[1:], "d:h")
+	except getopt.GetoptError :
+		usage(sys.argv[0])
+
+	if len(args) != 2 :
+		usage(sys.argv[0])
+
+	debug = 0
+	for opt,arg in opts :
+		if opt == "-d" :
+			debug = int(arg)
+		elif opt == "-h" :
+			usage(sys.argv[0])
+	try :
+		parsespec(args[0], args[1], debug)
+	except Error,e :
+		print e.args[0]
+
+if __name__ == "__main__" :
+	main()
+
diff -ruN pyggy-0.4.1.orig/pyggy/pyggy_gramtab.py pyggy-0.4.1/pyggy/pyggy_gramtab.py
--- pyggy-0.4.1.orig/pyggy/pyggy_gramtab.py	2004-07-02 04:40:58.000000000 -0400
+++ pyggy-0.4.1/pyggy/pyggy_gramtab.py	2009-01-18 20:15:20.000000000 -0500
@@ -166,7 +166,7 @@
 semactions = [action0, action0, action1, action2, action3, action4, action5, action6, action7, action8, action9, action10, action11, action12, action13, action14, action15, action16, action17, action18, action19, action20, action21, action22, action23, action24]
 gramspec = (goto, action, semactions)
 
-from errors import *
+from pyggy.errors import *
 	
 	# data collected when processing the parse.  
 globcode = ""
diff -ruN pyggy-0.4.1.orig/pyggy/pyggy_lextab.py pyggy-0.4.1/pyggy/pyggy_lextab.py
--- pyggy-0.4.1.orig/pyggy/pyggy_lextab.py	2004-07-01 17:57:24.000000000 -0400
+++ pyggy-0.4.1/pyggy/pyggy_lextab.py	2009-01-18 20:15:25.000000000 -0500
@@ -275,7 +275,7 @@
 
 lexspec = (rows,acc,starts,actions,eofactions,chr2uccl)
 
-from errors import *
+from pyggy.errors import *
 
 TOK_CODE = "TOK_CODE"
 TOK_LEFT = "TOK_LEFT"
diff -ruN pyggy-0.4.1.orig/pyggy/pyggy.py pyggy-0.4.1/pyggy/pyggy.py
--- pyggy-0.4.1.orig/pyggy/pyggy.py	2004-10-19 20:29:11.000000000 -0400
+++ pyggy-0.4.1/pyggy/pyggy.py	1969-12-31 19:00:00.000000000 -0500
@@ -1,243 +0,0 @@
-#!/usr/bin/python
-"""
-pyggy.py
-	Front end for the grammar spec file parser.
-"""
-
-import sys
-import getopt
-
-from errors import *
-import helpers
-
-# for parsing
-import lexer
-import srgram
-import glr
-
-# import our parsing table
-import pyggy_lextab
-import pyggy_gramtab
-gt = pyggy_gramtab
-
-# for generating a new parse table
-import slrgram
-
-
-def addtagged(name, prodno) :
-	if not name in gt.tagged :
-		gt.tagged[name] = []
-	if not prodno in gt.tagged[name] :
-		gt.tagged[name].append(prodno)
-
-def addconflict_int(conflict, p1, r, p2) :
-	if (p1,p2) in conflict :
-		if conflict[p1,p2] != r :
-			raise SpecError("Changing relationship between %d and %d from %s to %s" % (p1, p2, r, conflict[p1,p2]))
-		return 0
-	else :
-		conflict[p1,p2] = r
-		return 1
-
-def addconflict(conflict, p1, r, p2) :
-	"""
-	Add relationship "p1 r p2" to the conflict table.
-	Perform transitive closure for "gt" and "pref" relations.
-	"""
-	if addconflict_int(conflict, p1, r, p2) and r in ["gt", "pref" ] :
-		for (p3,p4),r2 in conflict.items() :
-			# p3==p2:  (p1 > p2) and (p2 > p4) --> (p1 > p4)
-			if p3 == p2 and r2 == r :
-				addconflict_int(conflict, p1, r, p4)
-			# p4==p1:  (p3 > p1) and (p1 > p2) --> (p3 > p2)
-			if p1 == p4 and r2 == r :
-				addconflict_int(conflict, p3, r, p2)
-
-def setprodprec(prodprec, prodno, prec, assoc) :
-	"set the precedence/assoc of a production, complain if already set."
-	v = [prec,assoc]
-	if prodprec[prodno] != None :
-		if prodprec[prodno] != v :
-			raise SpecError("Changing priority of [%s -> %s] from %s to %s" % \
-				(gt.gram[prodno][0], gt.gram[prodno][1], prodprec[prodno], v))
-	else :
-		prodprec[prodno] = v
-
-def printprec(tabs, conflict) :
-	print "Conflict relations: "
-	for (p1,p2),r in conflict.items() :
-		print "  %s %s %s" % (tabs.lr0.prodstr(p1), r, tabs.lr0.prodstr(p2))
-	print
-
-def addconflict_self(conflict, l, rel) :
-	"add (prod rel prod) to conflicts for each member of list"
-	for tag in l :
-		if tag in gt.tagged :
-			for prodno in gt.tagged[tag] :
-				for prodno2 in gt.tagged[tag] :
-					addconflict(conflict, prodno, rel, prodno2)
-					addconflict(conflict, prodno2, rel, prodno)
-
-def addconflict_decreasing(conflict, l, rel) :
-	"Add decreasing priority items to the conflict list"
-	# each member is less than the last
-	last = []
-	for tag in l :
-		if tag in gt.tagged :
-			for prodno in gt.tagged[tag] :
-				for lastprod in last :
-					addconflict(conflict, lastprod, rel, prodno)
-			if gt.tagged[tag] != [] :
-				last = gt.tagged[tag]
-
-def postproc(conflict, debug) :
-	"take the data structures we built up and generate parsing tables"
-	# find nonterminals and symbols
-	allsyms = []
-	for lhs,rhs in gt.gram :
-		for el in rhs :
-			if not el in allsyms :
-				allsyms.append(el)
-	
-	# tag all productions that contain a tag in their rhs.
-	unused = []
-	unrefed = []
-	allused = []
-	for tag in gt.leftlist + gt.rightlist + gt.nonassoclist + gt.preclist + gt.preflist :
-		if not tag in allused :
-			allused.append(tag)
-		for prodno in range(len(gt.gram)) :
-			if tag in gt.gram[prodno][1] :
-				addtagged(tag, prodno)
-		if not tag in gt.tagged and not tag in unused :
-			unused.append(tag)
-	for tag1,r,tag2 in gt.rellist :
-		if not tag1 in allused :
-			allused.append(tag1)
-		if not tag2 in allused :
-			allused.append(tag2)
-	for tag in gt.tagged.keys() :
-		if not tag in allused and not tag in unrefed:
-			unrefed.append(tag)
-	if unused != [] :
-		print "Warning: unused precedence tags:", " ".join(unused)
-	if unrefed != [] :
-		print "Warning: unreferenced tags:", " ".join(unrefed)
-
-	# fill up the conflict table with relations from tagged lists
-	addconflict_self(conflict, gt.leftlist, "left")
-	addconflict_self(conflict, gt.rightlist, "right")
-	addconflict_self(conflict, gt.nonassoclist, "nonassoc")
-	addconflict_decreasing(conflict, gt.preclist, "gt")
-	addconflict_decreasing(conflict, gt.preflist, "pref")
-
-	# add all explicitely stated relations
-	for tag1,r,tag2 in gt.rellist :
-		for prod1 in gt.tagged[tag1] :
-			for prod2 in gt.tagged[tag2] :
-				addconflict(conflict, prod1, r, prod2)
-
-def gen(fname, tabs) :
-	f = file(fname, "w")
-	f.write('\n# This file was generated automatically\n')
-
-	# emit all the actions
-	for idx in range(len(gt.funcs)) :
-		prods = ""
-		for idx2 in range(len(gt.gram)) :
-			if gt.actions[idx2] == idx :
-				if prods != "" :
-					prods += ", "
-				prods += tabs.lr0.prodstr(idx2)
-		f.write("\n# action %d for: %s\n" % (idx, prods))
-		f.write("def action%d(kids) :\n" % idx)
-		for line in gt.funcs[idx].split('\n') :
-			f.write("\t%s\n" % line)
-
-	tabs.write(f)
-	f.write("semactions = [%s]\n" % ", ".join(map(lambda n : "action%d" % n, gt.actions)))
-
-	f.write("gramspec = (goto, action, semactions)\n")
-
-	# write out the global code
-	f.write("\n")
-	f.write(gt.globcode)
-	f.write("\n")
-	f.close()
-
-def parsespec(fname, outfname, debug = 0) :
-	"""
-	Parse the spec file, generate parsing tables and write it out.
-
-	Debug levels less than 10 are for showing data about the parsed spec file
-	levels 10 and higher are for showing internal data.
-	"""
-	l = lexer.lexer(pyggy_lextab.lexspec)
-	l.setinput(fname)
-	g = srgram.SRGram(gt.gramspec)
-	p = glr.GLR(g)
-	p.setlexer(l)
-
-	try :
-		tree = p.parse()
-		# print the parse tree of the spec file
-		if debug >= 11 :
-			printcover = (debug >= 12)
-			glr.dottree(tree, printcover)
-		helpers.proctree(tree, gt)
-	except ParseError,e :
-		raise SpecError("%s:%d: parse error at %r" % (fname, pyggy_lextab.lineno, e.str))
-	except Error,e :
-		raise InternalError("unexpected exception %r" % e)
-
-
-	# process the parsed data
-	conflict = dict()
-	followsrestrict = [[] for idx in range(len(gt.gram))]
-	postproc(conflict, debug)
-
-	# generate tables
-	if debug >= 2 :
-		slrgram.debug = 1
-	tabs = slrgram.slrgram(gt.start, gt.gram, conflict, followsrestrict)
-
-	# print out information about the grammar, more if debug is set.
-	if debug >= 2 :
-		printprec(tabs, conflict)
-	printfull = (debug >= 1)
-	tabs.printtab(printfull)
-	if debug >= 3 : # show the lr0 state machine
-		tabs.lr0.dot()
-
-	gen(outfname, tabs)
-
-
-
-
-def usage(progname) :
-	print "usage:  %s [-d debuglevel] infile.pyg outfile.py"
-	sys.exit(1)
-
-def main() :
-	try :
-		opts,args = getopt.getopt(sys.argv[1:], "d:h")
-	except getopt.GetoptError :
-		usage(sys.argv[0])
-
-	if len(args) != 2 :
-		usage(sys.argv[0])
-
-	debug = 0
-	for opt,arg in opts :
-		if opt == "-d" :
-			debug = int(arg)
-		elif opt == "-h" :
-			usage(sys.argv[0])
-	try :
-		parsespec(args[0], args[1], debug)
-	except Error,e :
-		print e.args[0]
-
-if __name__ == "__main__" :
-	main()
-
diff -ruN pyggy-0.4.1.orig/pyggy/pyggy.pyg pyggy-0.4.1/pyggy/pyggy.pyg
--- pyggy-0.4.1.orig/pyggy/pyggy.pyg	2004-07-02 04:40:58.000000000 -0400
+++ pyggy-0.4.1/pyggy/pyggy.pyg	2009-01-18 20:11:34.000000000 -0500
@@ -4,7 +4,7 @@
 #
 
 code :
-	from errors import *
+	from pyggy.errors import *
 	
 	# data collected when processing the parse.  
 	globcode = ""
diff -ruN pyggy-0.4.1.orig/pyggy/pyggy.pyl pyggy-0.4.1/pyggy/pyggy.pyl
--- pyggy-0.4.1.orig/pyggy/pyggy.pyl	2004-07-02 04:40:58.000000000 -0400
+++ pyggy-0.4.1/pyggy/pyggy.pyl	2009-01-18 20:15:32.000000000 -0500
@@ -9,7 +9,7 @@
 	COMMENT		"#[^\n]*"
 
 code :
-	from errors import *
+	from pyggy.errors import *
 
 	TOK_CODE = "TOK_CODE"
 	TOK_LEFT = "TOK_LEFT"
diff -ruN pyggy-0.4.1.orig/pyggy/pylly_gramtab.py pyggy-0.4.1/pyggy/pylly_gramtab.py
--- pyggy-0.4.1.orig/pyggy/pylly_gramtab.py	2004-10-01 15:15:21.000000000 -0400
+++ pyggy-0.4.1/pyggy/pylly_gramtab.py	2009-01-18 20:11:22.000000000 -0500
@@ -282,8 +282,8 @@
 
 import nfa
 import dfa
-from util import printable
-from errors import *
+from pyggy.util import printable
+from pyggy.errors import *
 
 	# precomputed
 wildclass = map(chr, range(0,10) + range(11,256))
diff -ruN pyggy-0.4.1.orig/pyggy/pylly_lextab.py pyggy-0.4.1/pyggy/pylly_lextab.py
--- pyggy-0.4.1.orig/pyggy/pylly_lextab.py	2004-06-29 22:09:49.000000000 -0400
+++ pyggy-0.4.1/pyggy/pylly_lextab.py	2009-01-18 20:11:43.000000000 -0500
@@ -726,7 +726,7 @@
 lexspec = (rows,acc,starts,actions,eofactions,chr2uccl)
 
 import string
-from errors import *
+from pyggy.errors import *
 
 lineno = 1				# current line
 tabstop = 8				# tab is 8 spaces
diff -ruN pyggy-0.4.1.orig/pyggy/pylly.py pyggy-0.4.1/pyggy/pylly.py
--- pyggy-0.4.1.orig/pyggy/pylly.py	2004-10-19 20:29:11.000000000 -0400
+++ pyggy-0.4.1/pyggy/pylly.py	2009-01-18 20:14:08.000000000 -0500
@@ -7,17 +7,17 @@
 import sys
 import getopt
 
-from errors import *
-import helpers
+from pyggy.errors import *
+from pyggy import helpers
 
 # for lexing/parsing the spec
-import srgram
-import glr
-import lexer
+from pyggy import srgram
+from pyggy import glr
+from pyggy import lexer
 
-import pylly_lextab
+from pyggy import pylly_lextab
 from pylly_lextab import lexspec
-import pylly_gramtab
+from pyggy import pylly_gramtab
 gt = pylly_gramtab
 
 # post processing
@@ -35,7 +35,7 @@
 
 # generate a lexer spec file.
 def gen(fname, d) :
-	f = file(fname, 'w')
+	f = open(fname, 'w')
 	f.write("#\n# This file was automatically generated.\n\n")
 
 	# spit out the start states
diff -ruN pyggy-0.4.1.orig/pyggy/pylly.pyg pyggy-0.4.1/pyggy/pylly.pyg
--- pyggy-0.4.1.orig/pyggy/pylly.pyg	2004-10-01 15:15:20.000000000 -0400
+++ pyggy-0.4.1/pyggy/pylly.pyg	2009-01-18 20:11:11.000000000 -0500
@@ -8,8 +8,8 @@
 
 	import nfa
 	import dfa
-	from util import printable
-	from errors import *
+	from pyggy.util import printable
+	from pyggy.errors import *
 
 	# precomputed
 	wildclass = map(chr, range(0,10) + range(11,256))
diff -ruN pyggy-0.4.1.orig/pyggy/pylly.pyl pyggy-0.4.1/pyggy/pylly.pyl
--- pyggy-0.4.1.orig/pyggy/pylly.pyl	2004-07-02 04:40:58.000000000 -0400
+++ pyggy-0.4.1/pyggy/pylly.pyl	2009-01-18 20:15:39.000000000 -0500
@@ -16,7 +16,7 @@
 
 code :
 	import string
-	from errors import *
+	from pyggy.errors import *
 
 	lineno = 1				# current line
 	tabstop = 8				# tab is 8 spaces
diff -ruN pyggy-0.4.1.orig/pyggy/slrgram.py pyggy-0.4.1/pyggy/slrgram.py
--- pyggy-0.4.1.orig/pyggy/slrgram.py	2004-07-01 22:36:06.000000000 -0400
+++ pyggy-0.4.1/pyggy/slrgram.py	2009-01-18 20:14:44.000000000 -0500
@@ -4,8 +4,8 @@
 #	Implements functions for building SLR(1) parsing tables
 #
 
-from util import printable
-import dot
+from pyggy.util import printable
+from pyggy import dot
 
 debug = 0
 
diff -ruN pyggy-0.4.1.orig/setup.py pyggy-0.4.1/setup.py
--- pyggy-0.4.1.orig/setup.py	2003-08-12 02:00:11.000000000 -0400
+++ pyggy-0.4.1/setup.py	2009-01-16 10:45:11.000000000 -0500
@@ -3,11 +3,16 @@
 from distutils.core import setup
 import vers
 
+try:
+    from distutils.command.build_py import build_py_2to3 as build_py
+except ImportError:
+    from distutils.command.build_py import build_py
+
 setup(name = "pyggy",
 	version = vers.version,
 	author = "Tim Newsham",
 	author_email = "newsham@lava.net",
 	description = "Lexer and GLR parser generator",
 	url = "http://www.lava.net/~newsham/pyggy/",
-	packages = ['pyggy'])
-
+	packages = ['pyggy'],
+	cmdclass = {'build_py': build_py})
diff -ruN pyggy-0.4.1.orig/vers.py pyggy-0.4.1/vers.py
--- pyggy-0.4.1.orig/vers.py	2004-10-20 18:47:49.000000000 -0400
+++ pyggy-0.4.1/vers.py	2009-01-16 10:57:10.000000000 -0500
@@ -1,3 +1,3 @@
 
-version = 0.4
+version = "0.4.1"
 
