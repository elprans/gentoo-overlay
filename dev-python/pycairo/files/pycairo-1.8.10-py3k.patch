From 103a0278079020f336abcf2817fe21dc09f9e51a Mon Sep 17 00:00:00 2001
From: Vlad Pranskevichus <vlad@prans.net>
Date: Fri, 18 Jun 2010 20:42:54 +0300
Subject: [PATCH] Ported to Py3k

---
 examples/cairo_snippets/data/freedesktop.svg |   45 ++++++
 examples/cairo_snippets/data/home.svg        |  172 ++++++++++++++++++++
 setup.py                                     |   14 +-
 src/__init__.py                              |    2 +-
 src/cairomodule.c                            |   82 ++++++----
 src/context.c                                |  107 +++++--------
 src/font.c                                   |   60 +++----
 src/matrix.c                                 |   16 +--
 src/path.c                                   |   20 +--
 src/pattern.c                                |   24 +--
 src/surface.c                                |  215 +++++++++++++++-----------
 test/api_test.py                             |    1 +
 12 files changed, 490 insertions(+), 268 deletions(-)
 create mode 100644 examples/cairo_snippets/data/freedesktop.svg
 create mode 100644 examples/cairo_snippets/data/home.svg

diff --git a/examples/cairo_snippets/data/freedesktop.svg b/examples/cairo_snippets/data/freedesktop.svg
new file mode 100644
index 0000000..aef3899
--- /dev/null
+++ b/examples/cairo_snippets/data/freedesktop.svg
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN"
+"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
+<!-- Created with Inkscape (http://www.inkscape.org/) -->
+<svg
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:xlink="http://www.w3.org/1999/xlink"
+   version="1.0"
+   x="0.0000000"
+   y="0.0000000"
+   width="111.60000"
+   height="96.112503"
+   id="svg968">
+  <defs
+     id="defs970" />
+  <g
+     transform="translate(14.09647,16.85030)"
+     style="fill:#ffffff;stroke:#3b80ae;stroke-width:2.4588001;"
+     id="g862">
+    <g
+       id="g864">
+      <path
+         d="M 85.277000,40.796000 C 87.335000,48.680000 82.610000,56.738000 74.726000,58.795000 L 27.143000,71.210000 C 19.259000,73.267000 11.200000,68.543000 9.1430000,60.658000 L 1.6950000,32.108000 C -0.36200000,24.224000 4.3620000,16.166000 12.246000,14.109000 L 59.830000,1.6950000 C 67.714000,-0.36200000 75.772000,4.3620000 77.829000,12.246000 L 85.278000,40.796000 L 85.277000,40.796000 z "
+         style="stroke:#bababa;"
+         id="path866" />
+      <path
+         d="M 80.444000,39.778000 C 82.193000,47.632000 78.628000,53.399000 70.940000,55.225000 L 28.704000,66.245000 C 21.135000,68.641000 14.615000,65.064000 12.866000,57.409000 L 6.5300000,33.127000 C 4.7810000,24.982000 7.2390000,20.238000 16.033000,17.680000 L 58.270000,6.6610000 C 66.414000,4.8350000 72.359000,8.0240000 74.108000,15.496000 L 80.444000,39.778000 L 80.444000,39.778000 z "
+         style="fill:#3b80ae;stroke:none;"
+         id="path868" />
+    </g>
+    <path
+       d="M 45.542000,51.793000 L 24.104000,31.102000 L 62.204000,26.709000 L 45.542000,51.793000 z "
+       style="opacity:0.49999997;fill:none;stroke:#ffffff;"
+       id="path871" />
+    <path
+       d="M 72.325000,28.769000 C 72.730000,30.319000 71.800000,31.905000 70.250000,32.310000 L 57.919000,35.527000 C 56.368000,35.931000 54.782000,35.002000 54.377000,33.451000 L 52.082000,24.650000 C 51.677000,23.099000 52.606000,21.513000 54.158000,21.108000 L 66.488000,17.891000 C 68.039000,17.486000 69.625000,18.416000 70.030000,19.967000 L 72.325000,28.768000 L 72.325000,28.769000 z "
+       id="path873" />
+    <path
+       d="M 36.510000,33.625000 C 37.006000,35.525000 35.865000,37.469000 33.965000,37.965000 L 18.853000,41.908000 C 16.952000,42.404000 15.008000,41.264000 14.513000,39.364000 L 11.699000,28.578000 C 11.203000,26.677000 12.343000,24.734000 14.243000,24.238000 L 29.356000,20.296000 C 31.257000,19.800000 33.201000,20.939000 33.696000,22.840000 L 36.510000,33.626000 L 36.510000,33.625000 z "
+       id="path875" />
+    <path
+       d="M 52.493000,53.208000 C 52.771000,54.273000 52.133000,55.362000 51.068000,55.640000 L 42.600000,57.848000 C 41.536000,58.125000 40.447000,57.488000 40.169000,56.422000 L 38.592000,50.379000 C 38.315000,49.315000 38.952000,48.226000 40.017000,47.947000 L 48.485000,45.738000 C 49.549000,45.461000 50.639000,46.099000 50.916000,47.164000 L 52.493000,53.207000 L 52.493000,53.208000 z "
+       id="path877" />
+  </g>
+</svg>
diff --git a/examples/cairo_snippets/data/home.svg b/examples/cairo_snippets/data/home.svg
new file mode 100644
index 0000000..1e6e9ef
--- /dev/null
+++ b/examples/cairo_snippets/data/home.svg
@@ -0,0 +1,172 @@
+<?xml version="1.0" standalone="no"?>
+<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN"
+"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
+<svg
+   style="fill:#000000;fill-opacity:0.5;stroke:none"
+   width="595.275591"
+   height="841.889764"
+   id="svg32"
+   sodipodi:docbase="/home/mira/"
+   sodipodi:docname="/home/mira/HOME.SVG"
+   xmlns="http://www.w3.org/2000/svg"
+   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
+   xmlns:xlink="http://www.w3.org/1999/xlink">
+  <defs
+     id="defs34">
+    <linearGradient
+       id="linearGradient60">
+      <stop
+         style="stop-color:#fffa00;stop-opacity:1;"
+         offset="0.000000"
+         id="stop61" />
+      <stop
+         style="stop-color:#ffffff;stop-opacity:1;"
+         offset="1.000000"
+         id="stop62" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient57">
+      <stop
+         style="stop-color:#b55f07;stop-opacity:1;"
+         offset="0.000000"
+         id="stop58" />
+      <stop
+         style="stop-color:#ffba00;stop-opacity:1;"
+         offset="1.000000"
+         id="stop59" />
+    </linearGradient>
+    <linearGradient
+       id="linearGradient129">
+      <stop
+         style="stop-color:#ffffff;stop-opacity:0.803922;"
+         offset="0.000000"
+         id="stop130" />
+      <stop
+         style="stop-color:#000000;stop-opacity:0;"
+         offset="1.000000"
+         id="stop131" />
+    </linearGradient>
+    <linearGradient
+       xlink:href="#linearGradient129"
+       id="linearGradient132"
+       x1="0.29393"
+       y1="0.125996"
+       x2="0.85623"
+       y2="1.0028" />
+    <linearGradient
+       xlink:href="#linearGradient129"
+       id="linearGradient142"
+       x1="0.877848"
+       y1="0.382857"
+       x2="0.014196"
+       y2="0.388571" />
+    <linearGradient
+       xlink:href="#linearGradient129"
+       id="linearGradient48"
+       x1="1.45453"
+       y1="0.508571"
+       x2="0.0661232"
+       y2="0.542857" />
+    <linearGradient
+       x1="0.493086"
+       y1="0.428571"
+       x2="0.57144"
+       y2="0.514286"
+       xlink:href="#linearGradient129"
+       id="linearGradient49" />
+    <linearGradient
+       x1="0.450624"
+       y1="0.428571"
+       x2="0.407689"
+       y2="0.474286"
+       xlink:href="#linearGradient129"
+       id="linearGradient50" />
+    <linearGradient
+       xlink:href="#linearGradient57"
+       id="linearGradient53"
+       x1="-0.0101793"
+       y1="0.611429"
+       x2="0.631844"
+       y2="0.6" />
+    <linearGradient
+       xlink:href="#linearGradient129"
+       id="linearGradient54"
+       x1="1.09466"
+       y1="0.125"
+       x2="0.413062"
+       y2="0.8125" />
+    <linearGradient
+       xlink:href="#linearGradient60"
+       id="linearGradient59"
+       x1="0.0823339"
+       y1="0.125714"
+       x2="0.724897"
+       y2="0.891429" />
+  </defs>
+  <sodipodi:namedview
+     id="base" />
+  <path
+     style="fill:#ffed44; fill-opacity:1; fill-rule:evenodd; stroke:none; stroke-opacity:1; stroke-width:1px; stroke-linejoin:miter; stroke-linecap:butt; "
+     id="path19"
+     d="M 98.6818 379.556 C 101.447 395.138 84.4659 397.304 82.3 403.801 C 97.6078 414.826 57.854 431.626 65.2632 436.565 C 70.5236 441.168 148.734 472.689 161.588 473.915 C 240.299 489.097 403.639 478.246 433.526 464.086 C 469.341 443.926 487.452 441.74 493.153 431.978 C 489.778 423.883 458.119 408.779 464.978 402.491 C 459.263 395.348 434.63 396.088 440.077 380.867 C 422.813 375.934 436.705 380.835 424.351 371.693 C 419.735 370.539 418.532 360.553 413.866 360.553 C 371.778 332.301 166.405 341.551 122.927 365.141 C 116.725 377.474 105.928 377.141 98.6818 379.556 z "
+     sodipodi:nodetypes="cccccccccccc"
+     transform="translate(5.27831,-15.4344)" />
+  <rect
+     style="stroke:#8484ff; fill:none; fill-opacity:1; fill-rule:evenodd; stroke-opacity:1; stroke-width:1px; stroke-linejoin:miter; stroke-linecap:butt; "
+     id="rect322"
+     x="64.935965"
+     y="48.972789"
+     width="433.132119"
+     height="433.133400"
+     rx="0.000000"
+     ry="0.000000" />
+  <path
+     style="fill:#000000; fill-opacity:0.226601; fill-rule:evenodd; stroke:none; stroke-opacity:1; stroke-width:1px; stroke-linejoin:miter; stroke-linecap:butt; "
+     id="path20"
+     d="M 225.111 407.241 C 228.073 419.986 212.055 451.321 217.613 456.879 C 281.229 443.591 300.561 434.871 335.561 459.827 C 339.593 453.779 374.563 408.648 366.277 404.293 C 353.465 400.361 276.113 399.27 225.111 407.241 z "
+     sodipodi:nodetypes="ccccc"
+     transform="matrix(2.12227,0,0,0.789554,-343.775,81.6276)" />
+  <path
+     style="fill:url(#linearGradient59); fill-opacity:1; fill-rule:evenodd; stroke:#000000; stroke-opacity:1; stroke-width:14.5pt; stroke-linejoin:miter; stroke-linecap:butt; "
+     id="path12"
+     d="M 139.308 203.944 C 139.308 201.575 233.721 127.785 287.618 89.0777 C 340.114 127.448 429.823 199.485 428.59 203.184 C 427.653 210.677 428.798 374.969 428.283 383.488 C 415.177 382.832 337.394 381.715 313.611 381.522 C 313.968 371.038 315.048 273.863 315.048 269.785 C 314.282 268.254 258.781 267.567 249.267 268.877 C 249.469 274.22 245.964 373.813 246.117 384.143 C 231.965 384.007 150.448 384.799 140.619 384.799 C 138.95 383.964 139.308 210.497 139.308 203.944 z "
+     sodipodi:nodetypes="cccccccccc"
+     transform="translate(0,13.5963)" />
+  <path
+     style="fill:#000000; fill-opacity:1; fill-rule:evenodd; stroke:#000000; stroke-opacity:1; stroke-width:1px; stroke-linejoin:miter; stroke-linecap:butt; "
+     d="M 309.679 156.109 C 309.679 168.769 298.083 179.044 283.795 179.044 C 269.508 179.044 257.912 168.769 257.912 156.109 C 257.912 143.45 269.508 133.175 283.795 133.175 C 298.083 133.175 309.679 143.45 309.679 156.109 z "
+     id="path16"
+     transform="translate(0,14.9069)" />
+  <path
+     style="fill:#a1282e; fill-opacity:1; fill-rule:evenodd; stroke:none; stroke-opacity:1; stroke-width:1px; stroke-linejoin:miter; stroke-linecap:butt; "
+     id="path14"
+     d="M 72.3299 188.884 C 87.562 179.955 240.512 75.6699 253.51 69.0917 C 264.238 78.2487 396.189 209.005 404.353 216.036 C 410.737 211.966 404.443 203.725 408.287 194.647 C 401.148 185.404 264.361 56.8171 255.8 47.4144 C 244.34 55.045 78.1907 159.083 68.6151 166.448 C 74.0568 172.658 67.755 182.607 72.3299 188.884 z "
+     sodipodi:nodetypes="ccccccc"
+     transform="matrix(1.05933,-0.0878478,0.0876177,1.06211,13.6183,42.8198)" />
+  <path
+     style="fill:url(#linearGradient53); fill-opacity:1; fill-rule:evenodd; stroke:none; stroke-opacity:1; stroke-width:1px; stroke-linejoin:miter; stroke-linecap:butt; "
+     id="path52"
+     d="M 314.921 282.031 C 312.822 291.009 314.806 370.492 311.972 393.099 C 297.149 394.161 258.567 395.719 247.1 392.116 C 247.009 376.947 246.785 292.175 248.083 282.03 C 260.599 283.408 308.18 281.048 314.921 282.031 z "
+     sodipodi:nodetypes="ccccc"
+     transform="matrix(0.88331,0,0,1.06005,31.4699,-13.415)" />
+  <path
+     transform="translate(-2.94871,2.94871)"
+     style="fill:none; fill-opacity:1; fill-rule:evenodd; stroke:#ffc200; stroke-opacity:1; stroke-width:5.6pt; stroke-linejoin:miter; stroke-linecap:butt; "
+     d="M 312.464 168.751 C 312.464 182.179 300.574 193.078 285.925 193.078 C 271.276 193.078 259.387 182.179 259.387 168.751 C 259.387 155.322 271.276 144.424 285.925 144.424 C 300.574 144.424 312.464 155.322 312.464 168.751 z "
+     id="path56" />
+  <path
+     sodipodi:type="arc"
+     style="fill:none;fill-opacity:1;fill-rule:evenodd;stroke:url(#linearGradient54);stroke-opacity:1;stroke-width:5pt;stroke-linejoin:miter;stroke-linecap:butt;"
+     id="path63"
+     cx="283.795469"
+     cy="171.289836"
+     rx="28.504240"
+     ry="24.572621"
+     transform="matrix(0.942528,0,0,0.973333,15.3273,3.39476)" />
+  <path
+     style="fill:url(#linearGradient132);fill-opacity:1;fill-rule:evenodd;stroke:none;stroke-opacity:1;stroke-width:1px;stroke-linejoin:miter;stroke-linecap:butt;"
+     id="path64"
+     d="M 99.4081 237.963 C 109.883 231.977 120.469 220.777 132.251 216.85 C 129.812 253.364 130.29 237.086 129.905 262.595 C 170.232 247.472 239.132 165.447 257.756 175.797 C 307.535 207.834 333.293 221.542 356.286 240.31 C 386.728 243.837 435.162 238.56 436.047 218.023 C 443.49 221.244 447.659 227.348 461.852 235.617 C 461.383 227.759 462.036 219.197 460.679 209.813 C 440.956 193.304 300.875 82.9514 285.909 69.0578 C 263.711 84.8091 128.039 190.672 99.4081 210.986 C 100.258 218.929 99.4081 227.159 99.4081 237.963 z "
+     sodipodi:nodetypes="ccccccccccc"
+     transform="translate(2.63912,-0.000394997)" />
+</svg>
diff --git a/setup.py b/setup.py
index 0d9d0c2..d40f3be 100755
--- a/setup.py
+++ b/setup.py
@@ -26,20 +26,20 @@ def pkg_config_version_check(pkg, version):
   pipe = call('pkg-config --print-errors --exists "%s >= %s"' %
               (pkg, version))
   if pipe.returncode == 0:
-    print '%s >= %s detected' % (pkg, version)
+    print('%s >= %s detected' % (pkg, version))
   else:
-    print pipe.stderr.read()
+    print(pipe.stderr.read())
     raise SystemExit('Error: %s >= %s not found' % (pkg, version))
 
 def pkg_config_parse(opt, pkg):
   pipe = call("pkg-config %s %s" % (opt, pkg))
-  output = pipe.stdout.read()
+  output = pipe.stdout.read().decode()
   opt = opt[-2:]
   return [x.lstrip(opt) for x in output.split()]
 
 
 def createPcFile(PcFile):
-  print 'creating %s' % PcFile
+  print('creating %s' % PcFile)
   with open(PcFile, 'w') as fo:
     fo.write ("""\
 prefix=%s
@@ -54,7 +54,7 @@ Libs:
             )
 
 def createConfigFile(ConfigFile):
-  print 'creating %s' % ConfigFile
+  print('creating %s' % ConfigFile)
   v = pycairo_version.split('.')
 
   with open(ConfigFile, 'w') as fo:
@@ -73,8 +73,8 @@ def createConfigFile(ConfigFile):
             )
 
 
-if sys.version_info < (2,6):
-  raise SystemExit('Error: Python >= 2.6 is required')
+if sys.version_info < (3,0):
+  raise SystemExit('Error: Python >= 3.0 is required')
 
 pkg_config_version_check ('cairo', cairo_version_required)
 if sys.platform == 'win32':
diff --git a/src/__init__.py b/src/__init__.py
index 07501fc..821a1f2 100755
--- a/src/__init__.py
+++ b/src/__init__.py
@@ -1 +1 @@
-from _cairo import *
+from ._cairo import *
diff --git a/src/cairomodule.c b/src/cairomodule.c
index 68fb2f4..7dfd8db 100644
--- a/src/cairomodule.c
+++ b/src/cairomodule.c
@@ -30,7 +30,6 @@
 
 #define PY_SSIZE_T_CLEAN
 #include <Python.h>
-
 #include "config.h"
 #include "private.h"
 
@@ -156,93 +155,105 @@ static Pycairo_CAPI_t CAPI = {
 
 static PyObject *
 pycairo_cairo_version (PyObject *self) {
-  return PyInt_FromLong (cairo_version());
+  return PyLong_FromLong (cairo_version());
 }
 
 static PyObject *
 pycairo_cairo_version_string (PyObject *self) {
-  return PyString_FromString (cairo_version_string());
+  return PyUnicode_FromString (cairo_version_string());
 }
 
 static PyMethodDef cairo_functions[] = {
-  {"cairo_version",    (PyCFunction)pycairo_cairo_version, METH_NOARGS},
-  {"cairo_version_string", (PyCFunction)pycairo_cairo_version_string,
-   METH_NOARGS},
+        {"cairo_version",
+         (PyCFunction)pycairo_cairo_version,
+         METH_NOARGS,
+         "no doc"},
+        {"cairo_version_string",
+         (PyCFunction)pycairo_cairo_version_string,
+         METH_NOARGS,
+         "no doc"},
   {NULL, NULL, 0, NULL},
 };
 
 
-DL_EXPORT(void)
-init_cairo(void)
+static struct PyModuleDef cairo_module = {
+        PyModuleDef_HEAD_INIT,
+        "pycairo", /* name of module */
+        NULL,    /* module documentation, may be NULL */
+        -1,      /* size of per-interpreter state of the module,
+                   or -1 if the module keeps state in global variables. */
+        cairo_functions
+};
+
+PyMODINIT_FUNC
+PyInit__cairo(void)
 {
   PyObject *m;
 
   if (PyType_Ready(&PycairoContext_Type) < 0)
-    return;
+    return NULL;
   if (PyType_Ready(&PycairoFontFace_Type) < 0)
-    return;
+    return NULL;
   if (PyType_Ready(&PycairoToyFontFace_Type) < 0)
-    return;
+    return NULL;
   if (PyType_Ready(&PycairoFontOptions_Type) < 0)
-    return;
+    return NULL;
   if (PyType_Ready(&PycairoMatrix_Type) < 0)
-    return;
+    return NULL;
   if (PyType_Ready(&PycairoPath_Type) < 0)
-    return;
+    return NULL;
   PycairoPathiter_Type.tp_iter=&PyObject_SelfIter;
   if (PyType_Ready(&PycairoPathiter_Type) < 0)
-    return;
+    return NULL;
 
   if (PyType_Ready(&PycairoPattern_Type) < 0)
-    return;
+    return NULL;
   if (PyType_Ready(&PycairoSolidPattern_Type) < 0)
-    return;
+    return NULL;
   if (PyType_Ready(&PycairoSurfacePattern_Type) < 0)
-    return;
+    return NULL;
   if (PyType_Ready(&PycairoGradient_Type) < 0)
-    return;
+    return NULL;
   if (PyType_Ready(&PycairoLinearGradient_Type) < 0)
-    return;
+    return NULL;
   if (PyType_Ready(&PycairoRadialGradient_Type) < 0)
-    return;
+    return NULL;
 
   if (PyType_Ready(&PycairoScaledFont_Type) < 0)
-    return;
+    return NULL;
 
   if (PyType_Ready(&PycairoSurface_Type) < 0)
-    return;
+    return NULL;
 #ifdef CAIRO_HAS_IMAGE_SURFACE
   if (PyType_Ready(&PycairoImageSurface_Type) < 0)
-    return;
+    return NULL;
 #endif
 #ifdef CAIRO_HAS_PDF_SURFACE
   if (PyType_Ready(&PycairoPDFSurface_Type) < 0)
-    return;
+    return NULL;
 #endif
 #ifdef CAIRO_HAS_PS_SURFACE
   if (PyType_Ready(&PycairoPSSurface_Type) < 0)
-    return;
+    return NULL;
 #endif
 #ifdef CAIRO_HAS_SVG_SURFACE
   if (PyType_Ready(&PycairoSVGSurface_Type) < 0)
-    return;
+    return NULL;
 #endif
 #ifdef CAIRO_HAS_WIN32_SURFACE
-  if (PyType_Ready(&PycairoWin32Surface_Type) < 0)
-    return;
   if (PyType_Ready(&PycairoWin32PrintingSurface_Type) < 0)
-    return;
+    return NULL;
 #endif
 #ifdef CAIRO_HAS_XCB_SURFACE
   if (PyType_Ready(&PycairoXCBSurface_Type) < 0)
-    return;
+    return NULL;
 #endif
 #ifdef CAIRO_HAS_XLIB_SURFACE
   if (PyType_Ready(&PycairoXlibSurface_Type) < 0)
-    return;
+    return NULL;
 #endif
 
-  m = Py_InitModule("cairo._cairo", cairo_functions);
+  m = PyModule_Create( &cairo_module );
 
   PyModule_AddStringConstant(m, "version", VERSION);
   PyModule_AddObject(m, "version_info",
@@ -337,11 +348,11 @@ init_cairo(void)
   if (CairoError == NULL) {
     CairoError = PyErr_NewException("cairo.Error", NULL, NULL);
     if (CairoError == NULL)
-      return;
+      return NULL;
   }
   Py_INCREF(CairoError);
   if (PyModule_AddObject(m, "Error", CairoError) < 0)
-    return;
+    return NULL;
 
     /* constants */
 #if CAIRO_HAS_ATSUI_FONT
@@ -504,4 +515,5 @@ init_cairo(void)
   CONSTANT(SUBPIXEL_ORDER_VRGB);
   CONSTANT(SUBPIXEL_ORDER_VBGR);
 #undef CONSTANT
+  return m;
 }
diff --git a/src/context.c b/src/context.c
index 93b369f..312ab01 100644
--- a/src/context.c
+++ b/src/context.c
@@ -34,6 +34,18 @@
 #include "config.h"
 #include "private.h"
 
+const char * __PyUnicode_AsUTF8CharPtr (PyObject *o) {
+  if (PyUnicode_Check(o)) {
+    PyObject *u = PyUnicode_AsUTF8String(o);
+    if (u != NULL) {
+      const char *utf8 = PyBytes_AsString(u);
+      Py_DECREF(u);
+      return utf8;
+    }
+  }
+  return NULL;
+}
+
 
 /* PycairoContext_FromContext
  * Create a new PycairoContext from a cairo_t
@@ -77,7 +89,7 @@ pycairo_dealloc(PycairoContext *o) {
   }
   Py_CLEAR(o->base);
 
-  o->ob_type->tp_free((PyObject *)o);
+  o->ob_base.ob_type->tp_free((PyObject *)o);
 }
 
 static PyObject *
@@ -297,7 +309,7 @@ pycairo_font_extents (PycairoContext *o) {
 
 static PyObject *
 pycairo_get_antialias (PycairoContext *o) {
-  return PyInt_FromLong (cairo_get_antialias (o->ctx));
+  return PyLong_FromLong (cairo_get_antialias (o->ctx));
 }
 
 static PyObject *
@@ -339,12 +351,12 @@ pycairo_get_dash (PycairoContext *o) {
 
 static PyObject *
 pycairo_get_dash_count (PycairoContext *o) {
-  return PyInt_FromLong (cairo_get_dash_count (o->ctx));
+  return PyLong_FromLong (cairo_get_dash_count (o->ctx));
 }
 
 static PyObject *
 pycairo_get_fill_rule (PycairoContext *o) {
-  return PyInt_FromLong(cairo_get_fill_rule (o->ctx));
+  return PyLong_FromLong(cairo_get_fill_rule (o->ctx));
 }
 
 static PyObject *
@@ -379,12 +391,12 @@ pycairo_get_group_target (PycairoContext *o) {
 
 static PyObject *
 pycairo_get_line_cap (PycairoContext *o) {
-  return PyInt_FromLong(cairo_get_line_cap (o->ctx));
+  return PyLong_FromLong(cairo_get_line_cap (o->ctx));
 }
 
 static PyObject *
 pycairo_get_line_join (PycairoContext *o) {
-  return PyInt_FromLong(cairo_get_line_join (o->ctx));
+  return PyLong_FromLong(cairo_get_line_join (o->ctx));
 }
 
 static PyObject *
@@ -406,7 +418,7 @@ pycairo_get_miter_limit (PycairoContext *o) {
 
 static PyObject *
 pycairo_get_operator (PycairoContext *o) {
-  return PyInt_FromLong (cairo_get_operator (o->ctx));
+  return PyLong_FromLong (cairo_get_operator (o->ctx));
 }
 
 static PyObject *
@@ -468,7 +480,7 @@ _PyGlyphs_AsGlyphs (PyObject *py_object, int *num_glyphs)
 		      "each glyph item must be an (i,x,y) sequence");
       goto error;
     }
-    glyph->index = PyInt_AsLong(PySequence_Fast_GET_ITEM(py_seq, 0));
+    glyph->index = PyLong_AsLong(PySequence_Fast_GET_ITEM(py_seq, 0));
     glyph->x = PyFloat_AsDouble(PySequence_Fast_GET_ITEM(py_seq, 1));
     glyph->y = PyFloat_AsDouble(PySequence_Fast_GET_ITEM(py_seq, 2));
     if (PyErr_Occurred())
@@ -795,33 +807,25 @@ pycairo_scale (PycairoContext *o, PyObject *args) {
 static PyObject *
 pycairo_select_font_face (PycairoContext *o, PyObject *args) {
   PyObject *obj;
-  PyObject *pyUTF8 = NULL;
   const char *utf8family = NULL;
   cairo_font_slant_t slant   = CAIRO_FONT_SLANT_NORMAL;
   cairo_font_weight_t weight = CAIRO_FONT_WEIGHT_NORMAL;
 
   if (!PyArg_ParseTuple(args, "O!|ii:Context.select_font_face",
-			&PyBaseString_Type, &obj, &slant, &weight))
+			&PyUnicode_Type, &obj, &slant, &weight))
     return NULL;
 
-  /* accept str and unicode family, auto convert to utf8 as required */
-  if (PyString_Check(obj)) {
-    /* A plain ASCII string is also a valid UTF-8 string */
-    utf8family = PyString_AS_STRING(obj);
-  } else if (PyUnicode_Check(obj)) {
-    pyUTF8 = PyUnicode_AsUTF8String(obj);
-    if (pyUTF8 != NULL) {
-      utf8family = PyString_AS_STRING(pyUTF8);
-    }
-  } else {
+  utf8family = __PyUnicode_AsUTF8CharPtr(obj);
+  if (utf8family == NULL) {
     PyErr_SetString(PyExc_TypeError,
-		    "Context.select_font_face: family must be str or unicode");
+		    "Context.select_font_face: family must be str");
   }
+
   if (utf8family == NULL)
     return NULL;
 
   cairo_select_font_face (o->ctx, utf8family, slant, weight);
-  Py_XDECREF(pyUTF8);
+  //Py_XDECREF(pyUTF8);
   RETURN_NULL_IF_CAIRO_CONTEXT_ERROR(o->ctx);
   Py_RETURN_NONE;
 }
@@ -1124,21 +1128,12 @@ pycairo_show_text (PycairoContext *o, PyObject *obj) {
   PyObject *pyUTF8 = NULL;
   const char *utf8 = NULL;
 
-  /* accept str and unicode text, auto convert to utf8 as required */
-  if (PyString_Check(obj)) {
-    /* A plain ASCII string is also a valid UTF-8 string */
-    utf8 = PyString_AS_STRING(obj);
-  } else if (PyUnicode_Check(obj)) {
-    pyUTF8 = PyUnicode_AsUTF8String(obj);
-    if (pyUTF8 != NULL) {
-      utf8 = PyString_AS_STRING(pyUTF8);
-    }
-  } else {
+  utf8 = __PyUnicode_AsUTF8CharPtr(obj);
+  if (utf8 == NULL) {
     PyErr_SetString(PyExc_TypeError,
-		    "Context.show_text: text must be str or unicode");
-  }
-  if (utf8 == NULL)
+		    "Context.show_text: family must be str");
     return NULL;
+  }
 
   Py_BEGIN_ALLOW_THREADS;
   cairo_show_text (o->ctx, utf8);
@@ -1177,27 +1172,17 @@ pycairo_stroke_preserve (PycairoContext *o) {
 static PyObject *
 pycairo_text_extents (PycairoContext *o, PyObject *obj) {
   cairo_text_extents_t extents;
-  PyObject *pyUTF8 = NULL;
   const char *utf8 = NULL;
 
-  /* accept str and unicode text, auto convert to utf8 as required */
-  if (PyString_Check(obj)) {
-    /* A plain ASCII string is also a valid UTF-8 string */
-    utf8 = PyString_AS_STRING(obj);
-  } else if (PyUnicode_Check(obj)) {
-    pyUTF8 = PyUnicode_AsUTF8String(obj);
-    if (pyUTF8 != NULL) {
-      utf8 = PyString_AS_STRING(pyUTF8);
-    }
-  } else {
+  /* accept str  */
+  utf8 = __PyUnicode_AsUTF8CharPtr(obj);
+  if (utf8 == NULL) {
     PyErr_SetString(PyExc_TypeError,
-		    "Context.text_extents: text must be str or unicode");
-  }
-  if (utf8 == NULL)
+		    "Context.text_extents: text must be str");
     return NULL;
+  }
 
   cairo_text_extents (o->ctx, utf8, &extents);
-  Py_XDECREF(pyUTF8);
   RETURN_NULL_IF_CAIRO_CONTEXT_ERROR(o->ctx);
   return Py_BuildValue("(dddddd)", extents.x_bearing, extents.y_bearing,
 		       extents.width, extents.height, extents.x_advance,
@@ -1206,27 +1191,16 @@ pycairo_text_extents (PycairoContext *o, PyObject *obj) {
 
 static PyObject *
 pycairo_text_path (PycairoContext *o, PyObject *obj) {
-  PyObject *pyUTF8 = NULL;
   const char *utf8 = NULL;
 
-  /* accept str and unicode text, auto convert to utf8 as required */
-  if (PyString_Check(obj)) {
-    /* A plain ASCII string is also a valid UTF-8 string */
-    utf8 = PyString_AS_STRING(obj);
-  } else if (PyUnicode_Check(obj)) {
-    pyUTF8 = PyUnicode_AsUTF8String(obj);
-    if (pyUTF8 != NULL) {
-      utf8 = PyString_AS_STRING(pyUTF8);
-    }
-  } else {
+  utf8 = __PyUnicode_AsUTF8CharPtr(obj);
+  if (utf8 == NULL) {
     PyErr_SetString(PyExc_TypeError,
-		    "Context.text_path: text must be str or unicode");
-  }
-  if (utf8 == NULL)
+		    "Context.text_path: text must be str");
     return NULL;
+  }
 
   cairo_text_path (o->ctx, utf8);
-  Py_XDECREF(pyUTF8);
   RETURN_NULL_IF_CAIRO_CONTEXT_ERROR(o->ctx);
   Py_RETURN_NONE;
 }
@@ -1400,7 +1374,6 @@ static PyMethodDef pycairo_methods[] = {
 
 PyTypeObject PycairoContext_Type = {
   PyObject_HEAD_INIT(NULL)
-  0,                                  /* ob_size */
   "cairo.Context",                    /* tp_name */
   sizeof(PycairoContext),             /* tp_basicsize */
   0,                                  /* tp_itemsize */
@@ -1408,7 +1381,7 @@ PyTypeObject PycairoContext_Type = {
   0,                                  /* tp_print */
   0,                                  /* tp_getattr */
   0,                                  /* tp_setattr */
-  0,                                  /* tp_compare */
+  0,                                  /* tp_reserved */
   0,                                  /* tp_repr */
   0,                                  /* tp_as_number */
   0,                                  /* tp_as_sequence */
diff --git a/src/font.c b/src/font.c
index 3fcc9e4..eddd901 100644
--- a/src/font.c
+++ b/src/font.c
@@ -77,7 +77,7 @@ font_face_dealloc (PycairoFontFace *o) {
     cairo_font_face_destroy (o->font_face);
     o->font_face = NULL;
   }
-  o->ob_type->tp_free((PyObject *) o);
+  o->ob_base.ob_type->tp_free((PyObject *) o);
 }
 
 static PyObject *
@@ -101,7 +101,6 @@ static PyMethodDef font_face_methods[] = {
 
 PyTypeObject PycairoFontFace_Type = {
   PyObject_HEAD_INIT(NULL)
-  0,                                  /* ob_size */
   "cairo.FontFace",                   /* tp_name */
   sizeof(PycairoFontFace),            /* tp_basicsize */
   0,                                  /* tp_itemsize */
@@ -109,7 +108,7 @@ PyTypeObject PycairoFontFace_Type = {
   0,                                  /* tp_print */
   0,                                  /* tp_getattr */
   0,                                  /* tp_setattr */
-  0,                                  /* tp_compare */
+  0,                                  /* tp_reserved */
   0,                                  /* tp_repr */
   0,                                  /* tp_as_number */
   0,                                  /* tp_as_sequence */
@@ -156,22 +155,20 @@ toy_font_face_new (PyTypeObject *type, PyObject *args, PyObject *kwds) {
   cairo_font_weight_t weight = CAIRO_FONT_WEIGHT_NORMAL;
 
   if (!PyArg_ParseTuple(args, "O!|ii:ToyFontFace.__new__",
-			&PyBaseString_Type, &obj, &slant, &weight))
+			&PyUnicode_Type, &obj, &slant, &weight))
     return NULL;
 
-  /* accept str and unicode family, auto convert to utf8 as required */
-  if (PyString_Check(obj)) {
-    /* A plain ASCII string is also a valid UTF-8 string */
-    utf8family = PyString_AS_STRING(obj);
-  } else if (PyUnicode_Check(obj)) {
+  if (PyUnicode_Check(obj)) {
     pyUTF8 = PyUnicode_AsUTF8String(obj);
     if (pyUTF8 != NULL) {
-      utf8family = PyString_AS_STRING(pyUTF8);
+      utf8family = PyBytes_AsString(pyUTF8);
+      Py_DECREF(pyUTF8);
     }
   } else {
     PyErr_SetString(PyExc_TypeError,
-		    "ToyFontFace.__new__: family must be str or unicode");
+		    "ToyFontFace.__new__: family must be str");
   }
+
   if (utf8family == NULL)
     return NULL;
 
@@ -183,17 +180,17 @@ toy_font_face_new (PyTypeObject *type, PyObject *args, PyObject *kwds) {
 
 static PyObject *
 toy_font_get_family (PycairoToyFontFace *o) {
-  return PyString_FromString (cairo_toy_font_face_get_family (o->font_face));
+  return PyUnicode_FromString (cairo_toy_font_face_get_family (o->font_face));
 }
 
 static PyObject *
 toy_font_get_slant (PycairoToyFontFace *o) {
-  return PyInt_FromLong (cairo_toy_font_face_get_slant (o->font_face));
+  return PyLong_FromLong (cairo_toy_font_face_get_slant (o->font_face));
 }
 
 static PyObject *
 toy_font_get_weight (PycairoToyFontFace *o) {
-  return PyInt_FromLong (cairo_toy_font_face_get_weight (o->font_face));
+  return PyLong_FromLong (cairo_toy_font_face_get_weight (o->font_face));
 }
 
 static PyMethodDef toy_font_face_methods[] = {
@@ -206,7 +203,6 @@ static PyMethodDef toy_font_face_methods[] = {
 
 PyTypeObject PycairoToyFontFace_Type = {
   PyObject_HEAD_INIT(NULL)
-  0,                                  /* ob_size */
   "cairo.ToyFontFace",                /* tp_name */
   sizeof(PycairoToyFontFace),         /* tp_basicsize */
   0,                                  /* tp_itemsize */
@@ -214,7 +210,7 @@ PyTypeObject PycairoToyFontFace_Type = {
   0,                                  /* tp_print */
   0,                                  /* tp_getattr */
   0,                                  /* tp_setattr */
-  0,                                  /* tp_compare */
+  0,                                  /* tp_reserved */
   0,                                  /* tp_repr */
   0,                                  /* tp_as_number */
   0,                                  /* tp_as_sequence */
@@ -283,7 +279,7 @@ scaled_font_dealloc(PycairoScaledFont *o) {
     cairo_scaled_font_destroy (o->scaled_font);
     o->scaled_font = NULL;
   }
-  o->ob_type->tp_free((PyObject *) o);
+  o->ob_base.ob_type->tp_free((PyObject *) o);
 }
 
 static PyObject *
@@ -333,19 +329,17 @@ scaled_font_text_extents (PycairoScaledFont *o, PyObject *obj) {
   PyObject *pyUTF8 = NULL;
   const char *utf8 = NULL;
 
-  /* accept str and unicode text, auto convert to utf8 as required */
-  if (PyString_Check(obj)) {
-    /* A plain ASCII string is also a valid UTF-8 string */
-    utf8 = PyString_AS_STRING(obj);
-  } else if (PyUnicode_Check(obj)) {
+  if (PyUnicode_Check(obj)) {
     pyUTF8 = PyUnicode_AsUTF8String(obj);
     if (pyUTF8 != NULL) {
-      utf8 = PyString_AS_STRING(pyUTF8);
+      utf8 = PyBytes_AsString(pyUTF8);
+      Py_DECREF(pyUTF8);
     }
   } else {
     PyErr_SetString(PyExc_TypeError,
-		    "ScaledFont.text_extents: text must be str or unicode");
+		    "ScaledFont.text_extents: text must be str");
   }
+
   if (utf8 == NULL)
     return NULL;
 
@@ -380,7 +374,6 @@ static PyMethodDef scaled_font_methods[] = {
 
 PyTypeObject PycairoScaledFont_Type = {
   PyObject_HEAD_INIT(NULL)
-  0,                                  /* ob_size */
   "cairo.ScaledFont",                 /* tp_name */
   sizeof(PycairoScaledFont),          /* tp_basicsize */
   0,                                  /* tp_itemsize */
@@ -388,7 +381,7 @@ PyTypeObject PycairoScaledFont_Type = {
   0,                                  /* tp_print */
   0,                                  /* tp_getattr */
   0,                                  /* tp_setattr */
-  0,                                  /* tp_compare */
+  0,                                  /* tp_reserved */
   0,                                  /* tp_repr */
   0,                                  /* tp_as_number */
   0,                                  /* tp_as_sequence */
@@ -457,7 +450,7 @@ font_options_dealloc(PycairoFontOptions *o) {
     cairo_font_options_destroy (o->font_options);
     o->font_options = NULL;
   }
-  o->ob_type->tp_free((PyObject *) o);
+  o->ob_base.ob_type->tp_free((PyObject *) o);
 }
 
 static PyObject *
@@ -467,24 +460,24 @@ font_options_new (PyTypeObject *type, PyObject *args, PyObject *kwds) {
 
 static PyObject *
 font_options_get_antialias (PycairoFontOptions *o) {
-  return PyInt_FromLong (cairo_font_options_get_antialias (o->font_options));
+  return PyLong_FromLong (cairo_font_options_get_antialias (o->font_options));
 }
 
 static PyObject *
 font_options_get_hint_metrics (PycairoFontOptions *o) {
-  return PyInt_FromLong (cairo_font_options_get_hint_metrics
-			 (o->font_options));
+  return PyLong_FromLong (cairo_font_options_get_hint_metrics
+                          (o->font_options));
 }
 
 static PyObject *
 font_options_get_hint_style (PycairoFontOptions *o) {
-  return PyInt_FromLong (cairo_font_options_get_hint_style
+  return PyLong_FromLong (cairo_font_options_get_hint_style
 			 (o->font_options));
 }
 
 static PyObject *
 font_options_get_subpixel_order (PycairoFontOptions *o) {
-  return PyInt_FromLong (cairo_font_options_get_subpixel_order
+  return PyLong_FromLong (cairo_font_options_get_subpixel_order
 			 (o->font_options));
 }
 
@@ -565,7 +558,6 @@ static PyMethodDef font_options_methods[] = {
 
 PyTypeObject PycairoFontOptions_Type = {
   PyObject_HEAD_INIT(NULL)
-  0,                                  /* ob_size */
   "cairo.FontOptions",                /* tp_name */
   sizeof(PycairoFontOptions),         /* tp_basicsize */
   0,                                  /* tp_itemsize */
@@ -573,7 +565,7 @@ PyTypeObject PycairoFontOptions_Type = {
   0,                                  /* tp_print */
   0,                                  /* tp_getattr */
   0,                                  /* tp_setattr */
-  0,                                  /* tp_compare */
+  0,                                  /* tp_reserved */
   0,                                  /* tp_repr */
   0,                                  /* tp_as_number */
   0,                                  /* tp_as_sequence */
diff --git a/src/matrix.c b/src/matrix.c
index 59e177a..12cd1fb 100644
--- a/src/matrix.c
+++ b/src/matrix.c
@@ -52,7 +52,7 @@ PycairoMatrix_FromMatrix (const cairo_matrix_t *matrix) {
 
 static void
 matrix_dealloc (PycairoMatrix *o) {
-  o->ob_type->tp_free((PyObject *)o);
+  o->ob_base.ob_type->tp_free((PyObject *)o);
 }
 
 static PyObject *
@@ -119,7 +119,7 @@ matrix_repr (PycairoMatrix *o) {
 		o->matrix.xx, o->matrix.yx,
 		o->matrix.xy, o->matrix.yy,
 		o->matrix.x0, o->matrix.y0);
-  return PyString_FromString(buf);
+  return PyUnicode_FromString(buf);
 }
 
 static PyObject *
@@ -227,30 +227,25 @@ static PyNumberMethods matrix_as_number = {
   (binaryfunc)0,   /*nb_add*/
   (binaryfunc)0,   /*nb_subtract*/
   (binaryfunc)matrix_operator_multiply,  /*nb_multiply*/
-  (binaryfunc)0,   /*nb_divide*/
   (binaryfunc)0,   /*nb_remainder*/
   (binaryfunc)0,   /*nb_divmod*/
   (ternaryfunc)0,  /*nb_power*/
   (unaryfunc)0,    /*nb_negative*/
   (unaryfunc)0,    /*nb_positive*/
   (unaryfunc)0,    /*nb_absolute*/
-  (inquiry)0,      /*nb_nonzero*/
+  (inquiry)0,      /*nb_bool*/
   (unaryfunc)0,    /*nb_invert*/
   (binaryfunc)0,   /*nb_lshift*/
   (binaryfunc)0,   /*nb_rshift*/
   (binaryfunc)0,   /*nb_and*/
   (binaryfunc)0,   /*nb_xor*/
   (binaryfunc)0,   /*nb_or*/
-  (coercion)0,     /*nb_coerce*/
   (unaryfunc)0,    /*nb_int*/
-  (unaryfunc)0,    /*nb_long*/
+  (unaryfunc)0,    /*nb_reserved*/
   (unaryfunc)0,    /*nb_float*/
-  (unaryfunc)0,    /*nb_oct*/
-  (unaryfunc)0,    /*nb_hex*/
   0,		   /*nb_inplace_add*/
   0,		   /*nb_inplace_subtract*/
   0,		   /*nb_inplace_multiply*/
-  0,		   /*nb_inplace_divide*/
   0,		   /*nb_inplace_remainder*/
   0,		   /*nb_inplace_power*/
   0,		   /*nb_inplace_lshift*/
@@ -299,7 +294,6 @@ static PyMethodDef matrix_methods[] = {
 
 PyTypeObject PycairoMatrix_Type = {
   PyObject_HEAD_INIT(NULL)
-  0,                                  /* ob_size */
   "cairo.Matrix",                     /* tp_name */
   sizeof(PycairoMatrix),              /* tp_basicsize */
   0,                                  /* tp_itemsize */
@@ -307,7 +301,7 @@ PyTypeObject PycairoMatrix_Type = {
   0,                                  /* tp_print */
   0,                                  /* tp_getattr */
   0,                                  /* tp_setattr */
-  0,                                  /* tp_compare */
+  0,                                  /* tp_reserved */
   (reprfunc)matrix_repr,              /* tp_repr */
   &matrix_as_number,                  /* tp_as_number */
   &matrix_as_sequence,                /* tp_as_sequence */
diff --git a/src/path.c b/src/path.c
index 520518b..4acace7 100644
--- a/src/path.c
+++ b/src/path.c
@@ -74,7 +74,7 @@ path_dealloc(PycairoPath *p) {
     cairo_path_destroy(p->path);
     p->path = NULL;
   }
-  p->ob_type->tp_free((PyObject *)p);
+  p->ob_base.ob_type->tp_free((PyObject *)p);
 #ifdef DEBUG
   printf("path_dealloc end\n");
 #endif
@@ -113,7 +113,7 @@ path_str(PycairoPath *p) {
     case CAIRO_PATH_MOVE_TO:
       PyOS_snprintf(buf, sizeof(buf), "move_to %f %f",
 		    data[1].point.x, data[1].point.y);
-      s = PyString_FromString(buf);
+      s = PyUnicode_FromString(buf);
       if (!s)
 	goto Done;
       ret = PyList_Append(pieces, s);
@@ -125,7 +125,7 @@ path_str(PycairoPath *p) {
     case CAIRO_PATH_LINE_TO:
       PyOS_snprintf(buf, sizeof(buf), "line_to %f %f",
 		    data[1].point.x, data[1].point.y);
-      s = PyString_FromString(buf);
+      s = PyUnicode_FromString(buf);
       if (!s)
 	goto Done;
       ret = PyList_Append(pieces, s);
@@ -139,7 +139,7 @@ path_str(PycairoPath *p) {
 		    data[1].point.x, data[1].point.y,
 		    data[2].point.x, data[2].point.y,
 		    data[3].point.x, data[3].point.y);
-      s = PyString_FromString(buf);
+      s = PyUnicode_FromString(buf);
       if (!s)
 	goto Done;
       ret = PyList_Append(pieces, s);
@@ -149,7 +149,7 @@ path_str(PycairoPath *p) {
       break;
 
     case CAIRO_PATH_CLOSE_PATH:
-      s = PyString_FromString("close path");
+      s = PyUnicode_FromString("close path");
       if (!s)
 	goto Done;
       ret = PyList_Append(pieces, s);
@@ -160,10 +160,10 @@ path_str(PycairoPath *p) {
     }
   }
   /* result = "\n".join(pieces) */
-  s = PyString_FromString("\n");
+  s = PyUnicode_FromString("\n");
   if (s == NULL)
     goto Done;
-  result = _PyString_Join(s, pieces);
+  result = PyUnicode_Join(s, pieces);
   Py_DECREF(s);
 
 Done:
@@ -176,7 +176,6 @@ static PyObject * path_iter(PyObject *seq); /* forward declaration */
 
 PyTypeObject PycairoPath_Type = {
   PyObject_HEAD_INIT(NULL)
-  0,				        /* ob_size */
   "cairo.Path",			/* tp_name */
   sizeof(PycairoPath),		/* tp_basicsize */
   0,					/* tp_itemsize */
@@ -184,7 +183,7 @@ PyTypeObject PycairoPath_Type = {
   0,					/* tp_print */
   0,					/* tp_getattr */
   0,					/* tp_setattr */
-  0,					/* tp_compare */
+  0,					/* tp_reserved */
   0,		                	/* tp_repr */
   0,					/* tp_as_number */
   0,              			/* tp_as_sequence */
@@ -296,7 +295,6 @@ pathiter_next(PycairoPathiter *it) {
 
 PyTypeObject PycairoPathiter_Type = {
   PyObject_HEAD_INIT(NULL)
-  0,                                  /* ob_size */
   "cairo.Pathiter",                   /* tp_name */
   sizeof(PycairoPathiter),            /* tp_basicsize */
   0,                                  /* tp_itemsize */
@@ -304,7 +302,7 @@ PyTypeObject PycairoPathiter_Type = {
   0,                                  /* tp_print */
   0,                                  /* tp_getattr */
   0,                                  /* tp_setattr */
-  0,                                  /* tp_compare */
+  0,                                  /* tp_reserved */
   0,                                  /* tp_repr */
   0,                                  /* tp_as_number */
   0,                 			/* tp_as_sequence */
diff --git a/src/pattern.c b/src/pattern.c
index cebf0c9..2c10189 100644
--- a/src/pattern.c
+++ b/src/pattern.c
@@ -101,7 +101,7 @@ pattern_dealloc (PycairoPattern *o) {
   }
   Py_CLEAR(o->base);
 
-  o->ob_type->tp_free((PyObject *)o);
+  o->ob_base.ob_type->tp_free((PyObject *)o);
 }
 
 static PyObject *
@@ -113,7 +113,7 @@ pattern_new (PyTypeObject *type, PyObject *args, PyObject *kwds) {
 
 static PyObject *
 pattern_get_extend (PycairoPattern *o) {
-  return PyInt_FromLong (cairo_pattern_get_extend (o->pattern));
+  return PyLong_FromLong (cairo_pattern_get_extend (o->pattern));
 }
 
 static PyObject *
@@ -164,7 +164,6 @@ static PyMethodDef pattern_methods[] = {
 
 PyTypeObject PycairoPattern_Type = {
   PyObject_HEAD_INIT(NULL)
-  0,                                  /* ob_size */
   "cairo.Pattern",                    /* tp_name */
   sizeof(PycairoPattern),             /* tp_basicsize */
   0,                                  /* tp_itemsize */
@@ -172,7 +171,7 @@ PyTypeObject PycairoPattern_Type = {
   0,                                  /* tp_print */
   0,                                  /* tp_getattr */
   0,                                  /* tp_setattr */
-  0,                                  /* tp_compare */
+  0,                                  /* tp_reserved */
   0,                                  /* tp_repr */
   0,                                  /* tp_as_number */
   0,                                  /* tp_as_sequence */
@@ -233,7 +232,6 @@ static PyMethodDef solid_pattern_methods[] = {
 
 PyTypeObject PycairoSolidPattern_Type = {
   PyObject_HEAD_INIT(NULL)
-  0,                                  /* ob_size */
   "cairo.SolidPattern",               /* tp_name */
   sizeof(PycairoSolidPattern),        /* tp_basicsize */
   0,                                  /* tp_itemsize */
@@ -241,7 +239,7 @@ PyTypeObject PycairoSolidPattern_Type = {
   0,                                  /* tp_print */
   0,                                  /* tp_getattr */
   0,                                  /* tp_setattr */
-  0,                                  /* tp_compare */
+  0,                                  /* tp_reserved */
   0,                                  /* tp_repr */
   0,                                  /* tp_as_number */
   0,                                  /* tp_as_sequence */
@@ -290,7 +288,7 @@ surface_pattern_new (PyTypeObject *type, PyObject *args, PyObject *kwds) {
 
 static PyObject *
 surface_pattern_get_filter (PycairoSurfacePattern *o) {
-  return PyInt_FromLong (cairo_pattern_get_filter (o->pattern));
+  return PyLong_FromLong (cairo_pattern_get_filter (o->pattern));
 }
 
 static PyObject *
@@ -325,7 +323,6 @@ static PyMethodDef surface_pattern_methods[] = {
 
 PyTypeObject PycairoSurfacePattern_Type = {
   PyObject_HEAD_INIT(NULL)
-  0,                                  /* ob_size */
   "cairo.SurfacePattern",             /* tp_name */
   sizeof(PycairoSurfacePattern),      /* tp_basicsize */
   0,                                  /* tp_itemsize */
@@ -333,7 +330,7 @@ PyTypeObject PycairoSurfacePattern_Type = {
   0,                                  /* tp_print */
   0,                                  /* tp_getattr */
   0,                                  /* tp_setattr */
-  0,                                  /* tp_compare */
+  0,                                  /* tp_reserved */
   0,                                  /* tp_repr */
   0,                                  /* tp_as_number */
   0,                                  /* tp_as_sequence */
@@ -410,7 +407,6 @@ static PyMethodDef gradient_methods[] = {
 
 PyTypeObject PycairoGradient_Type = {
   PyObject_HEAD_INIT(NULL)
-  0,                                  /* ob_size */
   "cairo.Gradient",                   /* tp_name */
   sizeof(PycairoGradient),            /* tp_basicsize */
   0,                                  /* tp_itemsize */
@@ -418,7 +414,7 @@ PyTypeObject PycairoGradient_Type = {
   0,                                  /* tp_print */
   0,                                  /* tp_getattr */
   0,                                  /* tp_setattr */
-  0,                                  /* tp_compare */
+  0,                                  /* tp_reserved */
   0,                                  /* tp_repr */
   0,                                  /* tp_as_number */
   0,                                  /* tp_as_sequence */
@@ -480,7 +476,6 @@ static PyMethodDef linear_gradient_methods[] = {
 
 PyTypeObject PycairoLinearGradient_Type = {
   PyObject_HEAD_INIT(NULL)
-  0,                                  /* ob_size */
   "cairo.LinearGradient",             /* tp_name */
   sizeof(PycairoLinearGradient),      /* tp_basicsize */
   0,                                  /* tp_itemsize */
@@ -488,7 +483,7 @@ PyTypeObject PycairoLinearGradient_Type = {
   0,                                  /* tp_print */
   0,                                  /* tp_getattr */
   0,                                  /* tp_setattr */
-  0,                                  /* tp_compare */
+  0,                                  /* tp_reserved */
   0,                                  /* tp_repr */
   0,                                  /* tp_as_number */
   0,                                  /* tp_as_sequence */
@@ -552,7 +547,6 @@ static PyMethodDef radial_gradient_methods[] = {
 
 PyTypeObject PycairoRadialGradient_Type = {
   PyObject_HEAD_INIT(NULL)
-  0,                                  /* ob_size */
   "cairo.RadialGradient",             /* tp_name */
   sizeof(PycairoRadialGradient),      /* tp_basicsize */
   0,                                  /* tp_itemsize */
@@ -560,7 +554,7 @@ PyTypeObject PycairoRadialGradient_Type = {
   0,                                  /* tp_print */
   0,                                  /* tp_getattr */
   0,                                  /* tp_setattr */
-  0,                                  /* tp_compare */
+  0,                                  /* tp_reserved */
   0,                                  /* tp_repr */
   0,                                  /* tp_as_number */
   0,                                  /* tp_as_sequence */
diff --git a/src/surface.c b/src/surface.c
index 3c1b11d..04f05dc 100644
--- a/src/surface.c
+++ b/src/surface.c
@@ -128,7 +128,7 @@ PycairoSurface_FromSurface (cairo_surface_t *surface, PyObject *base) {
 static cairo_status_t
 _write_func (void *closure, const unsigned char *data, unsigned int length) {
   PyGILState_STATE gstate = PyGILState_Ensure();
-  PyObject *res = PyObject_CallMethod ((PyObject *)closure, "write", "(s#)",
+  PyObject *res = PyObject_CallMethod ((PyObject *)closure, "write", "(y#)",
 				       data, (Py_ssize_t)length);
   if (res == NULL) {
     /* an exception has occurred, it will be picked up later by
@@ -150,7 +150,7 @@ surface_dealloc (PycairoSurface *o) {
   }
   Py_CLEAR(o->base);
 
-  o->ob_type->tp_free((PyObject *)o);
+  o->ob_base.ob_type->tp_free((PyObject *)o);
 }
 
 static PyObject *
@@ -201,7 +201,7 @@ surface_flush (PycairoSurface *o) {
 
 static PyObject *
 surface_get_content (PycairoSurface *o) {
-  return PyInt_FromLong (cairo_surface_get_content (o->surface));
+  return PyLong_FromLong (cairo_surface_get_content (o->surface));
 }
 
 static PyObject *
@@ -285,11 +285,22 @@ static PyObject *
 surface_write_to_png (PycairoSurface *o, PyObject *file) {
   cairo_status_t status;
 
-  if (PyObject_TypeCheck (file, &PyString_Type)) {
+  if (PyObject_TypeCheck (file, &PyUnicode_Type)) {
     /* string (filename) argument */
+    PyObject *pyUTF8 = NULL;
+    const char *filename = NULL;
+    pyUTF8 = PyUnicode_AsUTF8String(file);
+    if (pyUTF8 != NULL) {
+      filename = PyBytes_AsString(pyUTF8);
+      Py_DECREF(pyUTF8);
+    } else {
+      PyErr_SetString(PyExc_TypeError,
+                      "Surface.write_to_png: file must be str");
+    }
+
     Py_BEGIN_ALLOW_THREADS;
     status = cairo_surface_write_to_png (o->surface,
-					 PyString_AsString(file));
+					 filename);
     Py_END_ALLOW_THREADS;
 
   } else {  /* file or file-like object argument */
@@ -346,7 +357,6 @@ static PyMethodDef surface_methods[] = {
 
 PyTypeObject PycairoSurface_Type = {
   PyObject_HEAD_INIT(NULL)
-  0,                                  /* ob_size */
   "cairo.Surface",                    /* tp_name */
   sizeof(PycairoSurface),             /* tp_basicsize */
   0,                                  /* tp_itemsize */
@@ -354,7 +364,7 @@ PyTypeObject PycairoSurface_Type = {
   0,                                  /* tp_print */
   0,                                  /* tp_getattr */
   0,                                  /* tp_setattr */
-  0,                                  /* tp_compare */
+  0,                                  /* tp_reserved */
   0,                                  /* tp_repr */
   0,                                  /* tp_as_number */
   0,                                  /* tp_as_sequence */
@@ -467,7 +477,7 @@ _read_func (void *closure, unsigned char *data, unsigned int length) {
      */
     goto end;
   }
-  int ret = PyString_AsStringAndSize(pystr, &buffer, &str_length);
+  int ret = PyBytes_AsStringAndSize(pystr, &buffer, &str_length);
   if (ret == -1 || str_length < length) {
     goto end;
   }
@@ -486,9 +496,19 @@ image_surface_create_from_png (PyTypeObject *type, PyObject *file) {
   PyObject* reader;
   cairo_surface_t *is;
 
-  if (PyObject_TypeCheck (file, &PyBaseString_Type)) {
+  if (PyObject_TypeCheck (file, &PyUnicode_Type)) {
+    PyObject *pyUTF8 = NULL;
+    const char *filename = NULL;
+    pyUTF8 = PyUnicode_AsUTF8String(file);
+    if (pyUTF8 != NULL) {
+      filename = PyBytes_AsString(pyUTF8);
+      Py_DECREF(pyUTF8);
+    } else {
+      PyErr_SetString(PyExc_TypeError,
+                      "ImageSurface.create_from_png: file must be str");
+    }
     Py_BEGIN_ALLOW_THREADS;
-    is = cairo_image_surface_create_from_png (PyString_AsString(file));
+    is = cairo_image_surface_create_from_png (filename);
     Py_END_ALLOW_THREADS;
     return PycairoSurface_FromSurface (is, NULL);
   }
@@ -518,88 +538,89 @@ image_surface_format_stride_for_width (PyObject *self, PyObject *args) {
   int width;
   if (!PyArg_ParseTuple(args, "ii:format_stride_for_width", &format, &width))
     return NULL;
-  return PyInt_FromLong (cairo_format_stride_for_width (format, width));
+  return PyLong_FromLong (cairo_format_stride_for_width (format, width));
 }
 
 static PyObject *
 image_surface_get_data (PycairoImageSurface *o) {
-  return PyBuffer_FromReadWriteObject((PyObject *)o, 0, Py_END_OF_BUFFER);
+  return PyMemoryView_FromObject((PyObject *)o);
 }
 
 static PyObject *
 image_surface_get_format (PycairoImageSurface *o) {
-  return PyInt_FromLong (cairo_image_surface_get_format (o->surface));
+  return PyLong_FromLong (cairo_image_surface_get_format (o->surface));
 }
 
 static PyObject *
 image_surface_get_height (PycairoImageSurface *o) {
-  return PyInt_FromLong (cairo_image_surface_get_height (o->surface));
+  return PyLong_FromLong (cairo_image_surface_get_height (o->surface));
 }
 
 static PyObject *
 image_surface_get_stride (PycairoImageSurface *o) {
-  return PyInt_FromLong (cairo_image_surface_get_stride (o->surface));
+  return PyLong_FromLong (cairo_image_surface_get_stride (o->surface));
 }
 
 static PyObject *
 image_surface_get_width (PycairoImageSurface *o) {
-  return PyInt_FromLong (cairo_image_surface_get_width (o->surface));
+  return PyLong_FromLong (cairo_image_surface_get_width (o->surface));
 }
 
 
-/* Buffer interface functions, used by ImageSurface.get_data() */
-static int
-image_surface_buffer_getreadbuf (PycairoImageSurface *o, int segment,
-				 const void **ptr) {
-  cairo_surface_t *surface = o->surface;
-  int height, stride;
-
-  if (segment != 0) {
-    PyErr_SetString(PyExc_SystemError,
-		    "accessing non-existent ImageSurface segment");
-    return -1;
-  }
-  height = cairo_image_surface_get_height (surface);
-  stride = cairo_image_surface_get_stride (surface);
-  *ptr = (void *) cairo_image_surface_get_data (surface);
-  return height * stride;
-}
-
-static int
-image_surface_buffer_getwritebuf (PycairoImageSurface *o, int segment,
-				  const void **ptr) {
-  cairo_surface_t *surface = o->surface;
-  int height, stride;
-
-  if (segment != 0) {
-    PyErr_SetString(PyExc_SystemError,
-		    "accessing non-existent ImageSurface segment");
-    return -1;
-  }
-  height = cairo_image_surface_get_height (surface);
-  stride = cairo_image_surface_get_stride (surface);
-  *ptr = (void *) cairo_image_surface_get_data (surface);
-  return height * stride;
+/**
+  * Buffer interface functions, used by ImageSurface.get_data()
+  * Note that this method is actually redundant now with the built-in
+  * memoryview().
+  */
+static int image_surface_getbuffer( PycairoImageSurface *o, Py_buffer *view, int flags ) {
+    cairo_surface_t *surf = o->surface;
+
+    int height = cairo_image_surface_get_height(surf);
+    int stride = cairo_image_surface_get_stride(surf);
+	unsigned char *pixels = cairo_image_surface_get_data(surf);
+
+	if( stride == 0 || pixels == NULL ) {
+		PyErr_SetString( CairoError,
+			"Either surface is not an Image Surface"
+			" or cairo_surface_finish has been called." );
+		return -1;
+	}
+
+	/**
+	 * This just something of a cop out, but it works. We're treating the
+	 * image as a 1-dimensional byte array, i.e. without structure. It is
+	 * possible to actually represent elements of the image's structure,
+	 * like pixel format or at least the fact that it's a 2-dimensional
+	 * array of pixels. This would simplify manipulation of the pixel data
+	 * through the memoryview methods. For the time being this code is
+	 * merely exposing the pixels as a raw array or bytes...acceptable
+	 * only because that is all cairo_image_surface_get_data() does.
+	 */
+
+	if( PyBuffer_FillInfo(
+		view,
+		(PyObject*)o,
+		(void *)pixels,
+		height * stride,
+		0, // not read-only
+		flags) < 0) return -1;
+	return 0;
 }
 
-static int
-image_surface_buffer_getsegcount (PycairoImageSurface *o, int *lenp) {
-  if (lenp) {
-    /* report the sum of the sizes (in bytes) of all segments */
-    cairo_surface_t *surface = o->surface;
-    int height = cairo_image_surface_get_height (surface);
-    int stride = cairo_image_surface_get_stride (surface);
-    *lenp = height * stride;
-  }
-  return 1;  /* surface data is all in one segment */
+static void image_surface_releasebuffer( PycairoImageSurface *o, Py_buffer *view ) {
+	/**
+	 * TODO: Verify following is true.
+	 * Nothing was Py_INCREF'ed, created or otherwise allocated in *_getbuffer,
+	 * so nothing to do here. I'm not sure it's not possible for the surface to
+	 * be gc'ed while references to this buffer (through memoryviews) persist,
+	 * and that would be Bad.
+	 */
 }
 
 /* See Python C API Manual 10.7 */
 static PyBufferProcs image_surface_as_buffer = {
-  (readbufferproc) image_surface_buffer_getreadbuf,
-  (writebufferproc)image_surface_buffer_getwritebuf,
-  (segcountproc)   image_surface_buffer_getsegcount,
-  (charbufferproc) NULL,
+	(getbufferproc)image_surface_getbuffer,
+	(releasebufferproc)image_surface_releasebuffer,
 };
 
 static PyMethodDef image_surface_methods[] = {
@@ -623,7 +644,6 @@ static PyMethodDef image_surface_methods[] = {
 
 PyTypeObject PycairoImageSurface_Type = {
   PyObject_HEAD_INIT(NULL)
-  0,                                  /* ob_size */
   "cairo.ImageSurface",               /* tp_name */
   sizeof(PycairoImageSurface),        /* tp_basicsize */
   0,                                  /* tp_itemsize */
@@ -631,7 +651,7 @@ PyTypeObject PycairoImageSurface_Type = {
   0,                                  /* tp_print */
   0,                                  /* tp_getattr */
   0,                                  /* tp_setattr */
-  0,                                  /* tp_compare */
+  0,                                  /* tp_reserved */
   0,                                  /* tp_repr */
   0,                                  /* tp_as_number */
   0,                                  /* tp_as_sequence */
@@ -688,10 +708,18 @@ pdf_surface_new (PyTypeObject *type, PyObject *args, PyObject *kwds) {
 				    width_in_points, height_in_points);
     Py_END_ALLOW_THREADS;
     return PycairoSurface_FromSurface (sfc, NULL);
-  }else if (PyObject_TypeCheck (file, &PyBaseString_Type)) {
+  } else if (PyObject_TypeCheck (file, &PyUnicode_Type)) {
     /* string (filename) argument */
+    PyObject *pyUTF8 = NULL;
+    const char *filename = NULL;
+    pyUTF8 = PyUnicode_AsUTF8String(file);
+    if (pyUTF8 != NULL) {
+      filename = PyBytes_AsString(pyUTF8);
+      Py_DECREF(pyUTF8);
+    }
+
     Py_BEGIN_ALLOW_THREADS;
-    sfc = cairo_pdf_surface_create (PyString_AsString(file),
+    sfc = cairo_pdf_surface_create (filename,
 				    width_in_points, height_in_points);
     Py_END_ALLOW_THREADS;
     return PycairoSurface_FromSurface (sfc, NULL);
@@ -737,7 +765,6 @@ static PyMethodDef pdf_surface_methods[] = {
 
 PyTypeObject PycairoPDFSurface_Type = {
   PyObject_HEAD_INIT(NULL)
-  0,                                  /* ob_size */
   "cairo.PDFSurface",                 /* tp_name */
   sizeof(PycairoPDFSurface),          /* tp_basicsize */
   0,                                  /* tp_itemsize */
@@ -745,7 +772,7 @@ PyTypeObject PycairoPDFSurface_Type = {
   0,                                  /* tp_print */
   0,                                  /* tp_getattr */
   0,                                  /* tp_setattr */
-  0,                                  /* tp_compare */
+  0,                                  /* tp_reserved */
   0,                                  /* tp_repr */
   0,                                  /* tp_as_number */
   0,                                  /* tp_as_sequence */
@@ -802,10 +829,21 @@ ps_surface_new (PyTypeObject *type, PyObject *args, PyObject *kwds) {
 				   width_in_points, height_in_points);
     Py_END_ALLOW_THREADS;
     return PycairoSurface_FromSurface (sfc, NULL);
-  }else if (PyObject_TypeCheck (file, &PyBaseString_Type)) {
+  }else if (PyObject_TypeCheck (file, &PyUnicode_Type)) {
     /* string (filename) argument */
+    PyObject *pyUTF8 = NULL;
+    const char *filename = NULL;
+    pyUTF8 = PyUnicode_AsUTF8String(file);
+    if (pyUTF8 != NULL) {
+      filename = PyBytes_AsString(pyUTF8);
+      Py_DECREF(pyUTF8);
+    } else {
+      PyErr_SetString(PyExc_TypeError,
+                      "Surface.write_to_png: file must be str");
+    }
+
     Py_BEGIN_ALLOW_THREADS;
-    sfc = cairo_ps_surface_create (PyString_AsString(file),
+    sfc = cairo_ps_surface_create (filename,
 				   width_in_points, height_in_points);
     Py_END_ALLOW_THREADS;
     return PycairoSurface_FromSurface (sfc, NULL);
@@ -876,7 +914,7 @@ ps_surface_ps_level_to_string (PyObject *self, PyObject *args) {
 		    "invalid level argument");
     return NULL;
   }
-  return PyString_FromString(s);
+  return PyUnicode_FromString(s);
 }
 
 static PyObject *
@@ -930,7 +968,6 @@ static PyMethodDef ps_surface_methods[] = {
 
 PyTypeObject PycairoPSSurface_Type = {
   PyObject_HEAD_INIT(NULL)
-  0,                                  /* ob_size */
   "cairo.PSSurface",                  /* tp_name */
   sizeof(PycairoPSSurface),           /* tp_basicsize */
   0,                                  /* tp_itemsize */
@@ -938,7 +975,7 @@ PyTypeObject PycairoPSSurface_Type = {
   0,                                  /* tp_print */
   0,                                  /* tp_getattr */
   0,                                  /* tp_setattr */
-  0,                                  /* tp_compare */
+  0,                                  /* tp_reserved */
   0,                                  /* tp_repr */
   0,                                  /* tp_as_number */
   0,                                  /* tp_as_sequence */
@@ -995,10 +1032,18 @@ svg_surface_new (PyTypeObject *type, PyObject *args, PyObject *kwds) {
 				    width_in_points, height_in_points);
     Py_END_ALLOW_THREADS;
     return PycairoSurface_FromSurface (sfc, NULL);
-  }else if (PyObject_TypeCheck (file, &PyBaseString_Type)) {
+  }else if (PyObject_TypeCheck (file, &PyUnicode_Type)) {
     /* string (filename) argument */
+    PyObject *pyUTF8 = NULL;
+    const char *filename = NULL;
+    pyUTF8 = PyUnicode_AsUTF8String(file);
+    if (pyUTF8 != NULL) {
+      filename = PyBytes_AsString(pyUTF8);
+      Py_DECREF(pyUTF8);
+    }
+
     Py_BEGIN_ALLOW_THREADS;
-    sfc = cairo_svg_surface_create (PyString_AsString(file),
+    sfc = cairo_svg_surface_create (filename,
 				    width_in_points, height_in_points);
     Py_END_ALLOW_THREADS;
     return PycairoSurface_FromSurface (sfc, NULL);
@@ -1036,7 +1081,6 @@ static PyMethodDef svg_surface_methods[] = {
 
 PyTypeObject PycairoSVGSurface_Type = {
   PyObject_HEAD_INIT(NULL)
-  0,                                  /* ob_size */
   "cairo.SVGSurface",                 /* tp_name */
   sizeof(PycairoSVGSurface),          /* tp_basicsize */
   0,                                  /* tp_itemsize */
@@ -1044,7 +1088,7 @@ PyTypeObject PycairoSVGSurface_Type = {
   0,                                  /* tp_print */
   0,                                  /* tp_getattr */
   0,                                  /* tp_setattr */
-  0,                                  /* tp_compare */
+  0,                                  /* tp_reserved */
   0,                                  /* tp_repr */
   0,                                  /* tp_as_number */
   0,                                  /* tp_as_sequence */
@@ -1101,7 +1145,6 @@ static PyMethodDef win32_surface_methods[] = {
 
 PyTypeObject PycairoWin32Surface_Type = {
   PyObject_HEAD_INIT(NULL)
-  0,                                  /* ob_size */
   "cairo.Win32Surface",               /* tp_name */
   sizeof(PycairoWin32Surface),        /* tp_basicsize */
   0,                                  /* tp_itemsize */
@@ -1109,7 +1152,7 @@ PyTypeObject PycairoWin32Surface_Type = {
   0,                                  /* tp_print */
   0,                                  /* tp_getattr */
   0,                                  /* tp_setattr */
-  0,                                  /* tp_compare */
+  0,                                  /* tp_reserved */
   0,                                  /* tp_repr */
   0,                                  /* tp_as_number */
   0,                                  /* tp_as_sequence */
@@ -1310,7 +1353,6 @@ static PyMethodDef xcb_surface_methods[] = {
 
 PyTypeObject PycairoXCBSurface_Type = {
   PyObject_HEAD_INIT(NULL)
-  0,                                  /* ob_size */
   "cairo.XCBSurface",                 /* tp_name */
   sizeof(PycairoXCBSurface),          /* tp_basicsize */
   0,                                  /* tp_itemsize */
@@ -1318,7 +1360,7 @@ PyTypeObject PycairoXCBSurface_Type = {
   0,                                  /* tp_print */
   0,                                  /* tp_getattr */
   0,                                  /* tp_setattr */
-  0,                                  /* tp_compare */
+  0,                                  /* tp_reserved */
   0,                                  /* tp_repr */
   0,                                  /* tp_as_number */
   0,                                  /* tp_as_sequence */
@@ -1368,17 +1410,17 @@ xlib_surface_new (PyTypeObject *type, PyObject *args, PyObject *kwds) {
 
 static PyObject *
 xlib_surface_get_depth (PycairoXlibSurface *o) {
-  return PyInt_FromLong (cairo_xlib_surface_get_depth (o->surface));
+  return PyLong_FromLong (cairo_xlib_surface_get_depth (o->surface));
 }
 
 static PyObject *
 xlib_surface_get_height (PycairoXlibSurface *o) {
-  return PyInt_FromLong (cairo_xlib_surface_get_height (o->surface));
+  return PyLong_FromLong (cairo_xlib_surface_get_height (o->surface));
 }
 
 static PyObject *
 xlib_surface_get_width (PycairoXlibSurface *o) {
-  return PyInt_FromLong (cairo_xlib_surface_get_width (o->surface));
+  return PyLong_FromLong (cairo_xlib_surface_get_width (o->surface));
 }
 
 static PyMethodDef xlib_surface_methods[] = {
@@ -1390,7 +1432,6 @@ static PyMethodDef xlib_surface_methods[] = {
 
 PyTypeObject PycairoXlibSurface_Type = {
   PyObject_HEAD_INIT(NULL)
-  0,                                  /* ob_size */
   "cairo.XlibSurface",                /* tp_name */
   sizeof(PycairoXlibSurface),         /* tp_basicsize */
   0,                                  /* tp_itemsize */
@@ -1398,7 +1439,7 @@ PyTypeObject PycairoXlibSurface_Type = {
   0,                                  /* tp_print */
   0,                                  /* tp_getattr */
   0,                                  /* tp_setattr */
-  0,                                  /* tp_compare */
+  0,                                  /* tp_reserved */
   0,                                  /* tp_repr */
   0,                                  /* tp_as_number */
   0,                                  /* tp_as_sequence */
diff --git a/test/api_test.py b/test/api_test.py
index 47d3520..206ad1c 100644
--- a/test/api_test.py
+++ b/test/api_test.py
@@ -88,3 +88,4 @@ def test_surface():
 
 def test_text():
   pass
+
-- 
1.7.1

